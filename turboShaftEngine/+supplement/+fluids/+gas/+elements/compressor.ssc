component compressor
% Compressor (G) : 1.5
% This block models a compressor in a gas network whose characteristics are
% described by either an analytical or tabulated compressor map. For the
% analytical formulation, pressure ratio, corrected mass flow rate,
% and corrected speed are normalized by their design values.<br/>
% <br/>
% Ports A and B are the gas conserving ports associated with the compressor
% inlet and outlet, respectively. Ports R and C are the mechanical
% rotational conserving ports associated with the shaft and casing,
% respectively. A positive rotation of Port R relative to Port C drives gas
% flow from Port A to Port B. The behavior of the block for reversed flow or
% rotation is undefined. The parameter beta is a coordinate along the speed
% line equal to 0 at choke and 1 at surge. When the Tabulated parameterization
% is selected, the physical signal port SM reports the Surge Margin.<br/>
% <br/>
% Right-click on the block and select <b>Fluids</b> > <b>Plot Compressor Map</b>
% to view the compressor map.

% Copyright 2016-2022 The MathWorks, Inc.

nodes
    A = foundation.gas.gas;                          % A:left
    B = foundation.gas.gas;                          % B:right
    R = foundation.mechanical.rotational.rotational; % R:right
    C = foundation.mechanical.rotational.rotational; % C:left
end

outputs(ExternalAccess = none)
    SM = 2/7; %SM: right
end

parameters
    parameterization = fluids.gas.turbomachinery.enum.CompressorParameterization.Analytical;   % Parameterization
    ref_from_init = false;   % Use initial condition as reference point
    p_ref           = {0.101325,  'MPa'}; % Reference pressure for corrected flow
    T_ref           = {288.15,  'K'  };   % Reference temperature for corrected flow
    mechanical_efficiency = 0.9;                % Mechanical efficiency
    area_A                = {1, 'm^2'};         % Inlet area at port A
    area_B                = {1, 'm^2'};         % Outlet area at port B
end
parameters(ExternalAccess = none)
    a = 1.5;                    % Spine shape, a
    b = 5;                      % Speed line spread, b
    k = 0.03;                   % Speed line roundness, k
    NDes = {10000, 'rpm'};      % Corrected speed at design point
    piDes = 7.5;                % Pressure ratio at design point
    etaMax = 0.887;             % Maximum isentropic efficiency
    etaMin = 0.5;               % Minimum isentropic efficiency
    mdotDes = {33, 'kg/s'};     % Corrected mass flow rate at design point
    piMaxEff = 7;               % Pressure ratio at maximum efficiency point
    mdotMaxEff = {30, 'kg/s'};  % Corrected mass flow rate at maximum efficiency point
    c = 3;                      % Efficiency peak flatness orthogonal to spine, c
    d = 4;                      % Efficiency peak flatness along spine, d
    cCap = 15;                  % Efficiency contour gradient orthogonal to spine, C
    dCap = 1.0;                 % Efficiency contour gradient along spine, D
    efficiencyType = fluids.gas.turbomachinery.enum.EfficiencyType.Analytical;  % Efficiency specification
    efficiencyValue = 0.8;      % Constant isentropic efficiency
    SMFault = simscape.enum.assert.action.none; % Report when surge margin is negative

    omega_TLU = {100.*[50, 60, 70, 75, 80, 85, 90, 95, 100, 110], 'rpm' };          % Corrected speed index vector, N
    beta_TLU = 0:1/6:1; %Beta index vector, beta
    mdot_TLU = {[10.4500   10.2030    9.7840    9.5260    9.1440    8.9470    8.6150
    13.3150   13.0180   12.5250   11.9840   11.4550   11.0860   10.9140
    17.6010   17.2040   16.5020   15.8000   14.9030   14.1790   13.1840
    20.3310   19.9830   19.3900   18.4920   17.4350   16.2930   14.8950
    23.4660   23.0920   22.5720   21.8070   20.6870   19.3000   17.6820
    26.2950   26.0910   25.7660   25.2800   24.4530   23.2600   21.3110
    29.0130   28.7470   28.6410   28.4120   28.0600   27.0980   25.3060
    31.4240   31.3790   31.2730   31.1030   30.8490   30.4840   29.7180
    33.6880   33.6060   33.5610   33.5130   33.3920   33.2580   33.0590
    37.6780   37.6210   37.5750   37.5980   37.5010   37.4150   37.4130], 'kg/s'};  % Corrected mass flow rate table, mdot(N,beta)
    eta_TLU =   [    0.6800    0.6900    0.6950    0.7000    0.7010    0.7050    0.7040
    0.7000    0.7250    0.7500    0.7550    0.7450    0.7300    0.7250
    0.7700    0.7950    0.8100    0.8050    0.7800    0.7650    0.7450
    0.7950    0.8120    0.8250    0.8200    0.8050    0.7800    0.7500
    0.8200    0.8370    0.8480    0.8490    0.8350    0.8050    0.7800
    0.8300    0.8450    0.8560    0.8600    0.8550    0.8400    0.8000
    0.8300    0.8480    0.8590    0.8690    0.8600    0.8520    0.8300
    0.8280    0.8450    0.8570    0.8690    0.8620    0.8550    0.8500
    0.8060    0.8300    0.8500    0.8600    0.8590    0.8570    0.8530
    0.7900    0.8000    0.8200    0.8350    0.8450    0.8480    0.8490];            % Isentropic efficiency table, eta(N,beta)
    pr_TLU =    [    1.3690    1.4590    1.5870    1.6540    1.7340    1.7750    1.8200
    1.9180    2.0750    2.2290    2.3180    2.4050    2.4560    2.4810
    2.7060    2.9660    3.1680    3.3340    3.4040    3.4450    3.4350
    3.2030    3.5330    3.8330    4.0210    4.1270    4.1350    4.0660
    3.7820    4.2220    4.5650    4.8670    5.0650    5.0700    4.9340
    4.3020    4.8610    5.2850    5.8210    6.1610    6.3340    6.1420
    4.8410    5.4450    5.9880    6.6280    7.2220    7.6230    7.5730
    5.3580    5.9970    6.5890    7.3340    8.0120    8.6680    9.0000
    5.8510    6.4910    7.1240    7.9820    8.7540    9.5700    9.8140
    6.7070    7.3210    8.0340    9.0470    9.9400   10.8340   10.9980];            % Pressure ratio table, pr(N,beta)
end

annotations
    UILayout = [UIGroup("Compressor Map",parameterization,omega_TLU,beta_TLU,pr_TLU,mdot_TLU,eta_TLU,SMFault,NDes,piDes,mdotDes,efficiencyType,efficiencyValue,etaMax,etaMin,mdotMaxEff,piMaxEff)
    UIGroup("Map Coefficients",a,b,k, c, d, cCap, dCap)
    UIGroup("Reference Data",ref_from_init,p_ref,T_ref,mechanical_efficiency,area_A,area_B)]
end

%%%%%%%%%%% EDITED %%%%%%%%%%%%
if ref_from_init
    annotations
        [p_ref, T_ref] : ExternalAccess = none;
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if parameterization == fluids.gas.turbomachinery.enum.CompressorParameterization.Analytical % Analytical Compressor
    annotations
        [efficiencyType,NDes,a, b, k, piDes, mdotDes] : ExternalAccess = modify;
        Icon='compressor.svg'
    end
    parameters(Access=private)
        thresh = 0.01;      % Smoothing threshold value near zero speed
        nthresh = 3e-2;     % Activation speed threshold to switch analytical governing relations for low speed
        mdotOp = mdotMaxEff / mdotDes;
        del_a = if (mdotOp == 1), -a else log((piMaxEff-1)/(piDes-1))/log(mdotOp)-a end;
    end
    intermediates (Access = private, ExternalAccess = none)
        % Ratio of mass flow rate to shaft speed
        mdot_omega = ...
            if (ge(ntil,nthresh)), ...
                mdot_A / omega ...
            else
            0 ...
            end;

        mtil = mdot_corrected/mdotDes;
        ntil = omega_corrected/NDes;
        ptil = (pressure_ratio-1)/(piDes-1);

        N_ab_smooth = ntil*(ntil^2 + thresh^2)^((a*b-1)/2);
        N_b_smooth  = ntil*(ntil^2 + thresh^2)^((b-1)/2);
        N_smooth    = sqrt(ntil^2 + thresh^2);
    end
    % Parameter checks
    equations
        assert(NDes > 0)
        assert(piDes > 1)
        assert(mdotDes > 0)
        assert(a > 0)
        assert(b > 0)
        assert(k > 0)
    end
    equations
        SM == 0;

        % Pressure ratio based on corrected shaft speed and beta
        if ge(ptil,mtil*(mtil^2+thresh^2)^((a-1)/2))
            %0 == ntil^(a*b) + 2*ntil*k*log(1-(mtil-ntil^b)/k)-ptil;     % Equation before smoothing
            0 == N_ab_smooth + 2*N_smooth*k*log(1-(mtil-N_b_smooth)/k)-ptil;
        else
            %0 == ntil^b + k*(1-exp((ptil-ntil^(a*b))/(2*ntil*k)))-mtil; % Equation before smoothing
            0 == N_b_smooth + k*(1-exp((ptil-N_ab_smooth)/(2*N_smooth*k)))-mtil;
        end
    end
    if efficiencyType == fluids.gas.turbomachinery.enum.EfficiencyType.Constant                     % Analytical constant efficiency
        annotations
            [efficiencyValue] : ExternalAccess = modify
        end
        intermediates (Access = private)
            isentropic_efficiency = efficiencyValue;                                                % Isentropic efficiency
        end
        equations
            assert(efficiencyValue > 0)
            assert(efficiencyValue <= 1)
        end
    else                                                                                            % Analytical variable efficiency
        annotations
            [etaMax, etaMin, piMaxEff, mdotMaxEff, c, d, cCap, dCap] : ExternalAccess = modify;
        end
        intermediates (Access = private, ExternalAccess = none)

            c_arg = (ptil)/((mtil+thresh)*(mtil^2+thresh^2)^(((a+del_a-1)-1)/2))-mtil;
            d_arg = mtil/mdotOp-1;

            c_arg_abs = ...
                if c_arg >= 0
                c_arg;
            else ...
                    -c_arg;
            end;

            d_arg_abs = ...
                if d_arg >= 0
                d_arg;
            else
                -d_arg;
            end;
        end
        intermediates (Access = Private)
            isentropic_efficiency = ...
                if lt(etaMax*(1-cCap*c_arg_abs^c-dCap*(d_arg_abs^d)), etaMin)
                etaMin; % Prevents unreasonably low efficiency value while off man from causing convergance issues during startup / shutdown
            else ...
                    %etaMax*(1-cCap*abs((ptil)/(mtil^(a+del_a-1))-mtil)^c-dCap*abs(mtil/mdotOp-1)^d); %Equation before smoothing
                etaMax*(1-cCap*c_arg_abs^c-dCap*(d_arg_abs^d));  %Smoothed x^a function to handle negative x argument
            end; % Isentropic efficiency
        end
        equations
            assert(etaMax > 0)
            assert(etaMax <= 1)
            assert(etaMin > 0)
            assert(etaMin < etaMax)
            assert(piMaxEff > 1)
            assert(mdotMaxEff > 0)
            assert(c > 1)
            assert(d > 1)
            assert(cCap > 0)
            assert(dCap > 0)
        end
    end
else                                                                                                % Tabulated Compressor
    variables(ExternalAccess = observe)
        beta = 2/7; % Beta
    end
    annotations
        [SM] : ExternalAccess = modify
%         Icon='compressor_SM_output.svg'
    end
    parameters (Access = private)
        beta_TLU_first = beta_TLU(1);   % First element of Beta index vector, beta
        beta_TLU_last  = beta_TLU(end); % Last element of Beta index vector, beta

        omega_corrected_threshold = omega_TLU(1); % Corrected shaft speed near zero speed
        mdot_omega_TLU_threshold  = mdot_TLU(1,:)'/omega_corrected_threshold; % Ratio of corrected flow to corrected speed near zero speed

        % Make vectors vertical
        omega_TLU_vertical = omega_TLU(:);
        beta_TLU_vertical  = beta_TLU(:);

        % Extend tables to negative shaft speed.  However, behavior is not expected to be valid for reversed flow

        omega_TLU_used = [-omega_TLU_vertical(end:-1:1); {0, 'rpm'}; omega_TLU_vertical];
        beta_TLU_used  = [-beta_TLU_vertical(2); beta_TLU_vertical; beta_TLU_vertical(end)+beta_TLU_vertical(2)];
        mdot_TLU_used  = [[-mdot_TLU(end:-1:1,1); {0, 'kg/s'}; mdot_TLU(:,1)], [-mdot_TLU(end:-1:1,:); {zeros(1,length(beta_TLU)), 'kg/s'}; mdot_TLU(:,:)], [-0.5.*mdot_TLU(end:-1:1,end); {0, 'kg/s'}; 0.5*mdot_TLU(:,end)]];
        eta_TLU_used   = [[eta_TLU(end:-1:1,1); eta_TLU(1,1); eta_TLU(:,1)], [eta_TLU(end:-1:1,:); eta_TLU(1,:); eta_TLU(:,:)], [eta_TLU(end:-1:1,end); eta_TLU(1,end); eta_TLU(:,end)]];
        pr_TLU_used    = [[0.5./pr_TLU(end:-1:1,1); 1/4.*(pr_TLU(1,1)+1./pr_TLU(1,1)); 0.5.*pr_TLU(:,1)], [1./pr_TLU(end:-1:1,:); 1/2.*(pr_TLU(1,:)+1./pr_TLU(1,:)); pr_TLU(:,:)], [1./pr_TLU(end:-1:1,end); 1/2.*(pr_TLU(1,end)+1./pr_TLU(1,end)); pr_TLU(:,end)]];

    end
    equations
        % Surge margin
        (SM + 1)*pressure_ratio == tablelookup(omega_TLU_used, pr_TLU_used(:,size(beta_TLU_used,1)-2), omega_corrected, interpolation = linear, extrapolation = linear);

        % Pressure ratio based on corrected shaft speed and beta
        pressure_ratio == tablelookup(omega_TLU_used, beta_TLU_used, pr_TLU_used,omega_corrected, beta, interpolation = linear, extrapolation = linear);

        % Corrected mass flow rate
        mdot_corrected == tablelookup(omega_TLU_used, beta_TLU_used, mdot_TLU_used, omega_corrected, beta, interpolation = linear, extrapolation = linear);
    end

    %Parameter checks
    equations
        % Check table size
        assert(length(omega_TLU) >= 2)
        assert(length(beta_TLU) >= 2)
        assert(all(size(mdot_TLU) == [length(omega_TLU),length(beta_TLU)]))
        assert(all(size(eta_TLU) == [length(omega_TLU),length(beta_TLU)]))
        assert(all(size(pr_TLU) == [length(omega_TLU),length(beta_TLU)]))

        % Check table grid order
        assert(all(diff(beta_TLU) > 0))
        assert(all(diff(omega_TLU) > 0))

        % Check values
        assert(beta_TLU_first == 0)
        assert(beta_TLU_last == 1)
        assert(all(omega_TLU(:) > 0))
        %assert(all(pr_TLU(:) > 1))                 %Some elements on the original brayton cycle map (and others) are actualy below 1.
        assert(all(pr_TLU(:) > 0))
        assert(all(mdot_TLU(:) > 0))
        assert(all(eta_TLU(:) > 0))
        assert(all(eta_TLU(:) <= 1))
        assert(all(all(diff(mdot_TLU, 1, 1) > 0)))
        assert(all(all(diff(pr_TLU, 1, 1) > 0)))

    end
    annotations
        [omega_TLU, beta_TLU, mdot_TLU, eta_TLU, pr_TLU, SMFault] : ExternalAccess = modify;
    end
    intermediates (Access = private, ExternalAccess = none)
        % Ratio of mass flow rate to shaft speed in the limit of zero shaft speed
        mdot_omega_corrected_threshold = tablelookup(beta_TLU, mdot_omega_TLU_threshold, beta, interpolation = linear, extrapolation = linear);
        mdot_omega_threshold = mdot_omega_corrected_threshold * (p_A/p_reference) / (T_A/T_reference);

        % Ratio of mass flow rate to shaft speed
        mdot_omega = ...
            if ge(omega_corrected, omega_corrected_threshold), ...
                mdot_A / omega ...
            else ...
                mdot_omega_threshold ...
            end;
    end
    intermediates (Access = private)
        isentropic_efficiency = tablelookup(omega_TLU_used, beta_TLU_used, eta_TLU_used, omega_corrected, beta, interpolation = linear, extrapolation = nearest); % Isentropic efficiency
    end

    % Check of compressor surges
    if (SMFault ~= simscape.enum.assert.action.none)
        equations
            assert(SM < 0,'Surge margin must be greater than zero', Action=SMFault)
        end
    end
end

% Parameter checks
equations
    assert(p_reference > 0)
    assert(T_reference > 0)
    assert(mechanical_efficiency > 0)
    assert(area_A > 0)
    assert(area_B > 0)
end

variables (Access = protected)
    mdot_A = {0, 'kg/s'};           % Mass flow rate into port A
    mdot_B = {0, 'kg/s'};           % Mass flow rate into port B
    Phi_A  = {0, 'kW'  };           % Energy flow rate into port A
    Phi_B  = {0, 'kW'  };           % Energy flow rate into port B
    torque = {0, 'N*m' };           % Shaft torque
end

variables (Access = protected, ExternalAccess = none)
    T_A      = {300, 'K'};          % Temperature at port A
    T_B      = {300, 'K'};          % Temperature at port B
    T_B_isen = {300, 'K'};          % Isentropic temperature at port B
    mdot_corrected = {10, 'kg/s'};  % Corrected mass flow rate
end

branches
    mdot_A : A.mdot -> *;
    mdot_B : B.mdot -> *;
    Phi_A  : A.Phi  -> *;
    Phi_B  : B.Phi  -> *;
    torque : R.t    -> C.t;
end

intermediates (Access = private, ExternalAccess = none)
    % Port pressure
    p_A = A.p;
    p_B = B.p;

    % Log temperature
    log_T_A      = simscape.function.logProtected(T_A     /A.T_unit, 1);
    log_T_B      = simscape.function.logProtected(T_B     /A.T_unit, 1);
    log_T_B_isen = simscape.function.logProtected(T_B_isen/A.T_unit, 1);

    % Log pressure
    log_p_A = simscape.function.logProtected(p_A/A.p_unit, 1);
    log_p_B = simscape.function.logProtected(p_B/A.p_unit, 1);

    % Thermal equation of state
    % Use log-space to improve accuracy
    [rho_A, rho_B, rho_B_isen] = ...
        if A.gas_spec ~= foundation.enum.gas_spec.real_gas, ...
            exp(log_p_A - A.log_ZR - log_T_A     ) * A.rho_unit; ...
            exp(log_p_B - A.log_ZR - log_T_B     ) * A.rho_unit; ...
            exp(log_p_B - A.log_ZR - log_T_B_isen) * A.rho_unit ...
        else ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_A,      log_p_A, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_B,      log_p_B, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_B_isen, log_p_B, interpolation = linear, extrapolation = linear)) * A.rho_unit ...
        end;

    % Caloric equation of state
    [h_A, h_B, h_B_isen] = ...
        if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
            A.h_ref + A.cp_ref*(T_A      - A.T_ref); ...
            A.h_ref + A.cp_ref*(T_B      - A.T_ref); ...
            A.h_ref + A.cp_ref*(T_B_isen - A.T_ref) ...
        elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_A,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_B,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_B_isen, interpolation = linear, extrapolation = linear) ...
        else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_A,      p_A, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_B,      p_B, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_B_isen, p_B, interpolation = linear, extrapolation = linear) ...
        end;

    % Specific total enthalpy
    ht_A      = h_A      + (mdot_A/area_A/rho_A     )^2/2;
    ht_B      = h_B      + (mdot_B/area_B/rho_B     )^2/2;
    ht_B_isen = h_B_isen + (mdot_B/area_B/rho_B_isen)^2/2;

    % Integral of dh/T table lookup (for semiperfect gas only)
    [int_dh_T_A, int_dh_T_B_isen] = ...
        if A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.log_T_TLU1, A.int_dh_T_TLU1, log_T_A,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU1, A.int_dh_T_TLU1, log_T_B_isen, interpolation = linear, extrapolation = linear) ...
        else ...
            {1, 'kJ/(kg*K)'}; ...
            {1, 'kJ/(kg*K)'} ...
        end;

    % Specific entropy table lookup (for real gas only)
    [s_A, s_B_isen] = ...
        if A.gas_spec == foundation.enum.gas_spec.real_gas, ...
            tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.s_TLU2, log_T_A,      log_p_A, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.s_TLU2, log_T_B_isen, log_p_B, interpolation = linear, extrapolation = linear) ...
        else ...
            {1, 'kJ/(kg*K)'}; ...
            {1, 'kJ/(kg*K)'} ...
        end;

    % Corrected shaft speed
    omega = R.w - C.w;
    omega_corrected = omega / sqrt(T_A/T_reference);

    % Specific total enthalpy
    delta_ht              = ht_B      - ht_A; % Actual change in specific total enthalpy
    delta_ht_isen         = ht_B_isen - ht_A; % Isentropic change in specific total enthalpy
end

%%%%%%%%%%%% EDITED %%%%%%%%%%%
intermediates (Access = private)
    % Pressure ratio
    pressure_ratio = p_B/p_A;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% For logging
intermediates (Access = private)
    mechanical_power      = torque * omega; % Shaft power
    fluid_power           = mdot_A * delta_ht; % Power added to the gas flow
    inlet_velocity        = mdot_A / rho_A / area_A; % Inlet flow velocity
    outlet_velocity       = mdot_B / rho_B / area_B; % Outlet flow velocity
end

%%%%%%%%%%%%% Edited %%%%%%%%%%%%%
variables (Access = protected)
    p_reference           = {0.101325, 'MPa'}; % Reference pressure for corrected flow
    T_reference           = {288.15,   'K'  }; % Reference temperature for corrected flow
end

if ref_from_init == true
    equations(Initial = true)
        p_reference == p_A;
        T_reference == T_A;
    end
equations
    der(p_reference) == 0;
    der(T_reference) == 0;
end
else
equations
    p_reference == p_ref;
    T_reference == T_ref;
end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%

equations
    % Mass balance
    mdot_A + mdot_B == 0;

    % Energy balance
    Phi_A + Phi_B + fluid_power == 0;

    % Corrected mass flow rate
    mdot_A * sqrt(T_A/T_reference) == mdot_corrected * (p_A/p_reference);

    % Power balance
    mechanical_efficiency * torque == mdot_omega * delta_ht;

    % Isentropic efficiency
    isentropic_efficiency * delta_ht == delta_ht_isen;

    % Isentropic relation
    if A.gas_spec == foundation.enum.gas_spec.perfect_gas
        A.cp_ref*log_T_A - A.Z*A.R*log_p_A == A.cp_ref*log_T_B_isen - A.Z*A.R*log_p_B;
    elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas
        int_dh_T_A - A.Z*A.R*log_p_A == int_dh_T_B_isen - A.Z*A.R*log_p_B;
    else % A.gas_spec == foundation.enum.gas_spec.real_gas
        s_A == s_B_isen;
    end

    let
        % Indicator variables for the valid region of the property tables
        [indicator_pT_A, indicator_pT_B] = ...
            if (A.gas_spec == foundation.enum.gas_spec.real_gas) && (A.pT_region_flag == foundation.enum.pT_region_G.validity_matrix), ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, A.T, A.p, interpolation = linear, extrapolation = linear); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, B.T, B.p, interpolation = linear, extrapolation = linear) ...
            else ...
                1; ...
                1 ...
            end;
    in
        % Pressure and temperature must be within the valid region
        assert(indicator_pT_A > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'A'))
        assert(A.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'A'))
        assert(A.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'A'))
        assert(A.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'A'))
        assert(A.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'A'))
        assert(indicator_pT_B > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'B'))
        assert(B.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'B'))
        assert(B.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'B'))
        assert(B.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'B'))
        assert(B.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'B'))
    end
end

% Internal components that calculate energy convection at ports A and B
components (ExternalAccess = none)
    convection_A = foundation.gas.port_convection(flow_area = area_A);
    convection_B = foundation.gas.port_convection(flow_area = area_B);
end
connections
    connect(A, convection_A.port)
    connect(B, convection_B.port)
end

% Equate variables for internal components that calculate energy convection at ports A and B
equations
    convection_A.mdot == mdot_A;
    convection_A.Phi  == Phi_A;
    convection_B.mdot == mdot_B;
    convection_B.Phi  == Phi_B;

    convection_A.ht_I == convection_B.ht_I;
    convection_B.ht_I == ht_B;
end

end 