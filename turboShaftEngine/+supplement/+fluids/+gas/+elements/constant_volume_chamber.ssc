component constant_volume_chamber
% Constant Volume Chamber (G) : 1.5
% This block models mass and energy storage in a gas network. The chamber
% contains a constant volume of gas. Pressure and temperature evolve based
% on the dynamic compressibility and thermal capacity of this gas volume.
%
% Ports A, B, C, and D are the gas conserving ports associated with the
% chamber inlets. Port H is the thermal conserving port associated with the
% thermal mass of the gas volume.

% Copyright 2016-2021 The MathWorks, Inc.

nodes
    A = foundation.gas.gas;         % A:top
    H = foundation.thermal.thermal; % H:top
end
nodes (ExternalAccess = none)
    B = foundation.gas.gas;         % B:bottom
    C = foundation.gas.gas;         % C:bottom
    D = foundation.gas.gas;         % D:bottom
end

parameters
    steady_state = false; % Steady-state equations
    num_ports = foundation.enum.num_ports.one; % Number of ports
    %                                            1 - one
    %                                            2 - two
    %                                            3 - three
    %                                            4 - four
    area_A = {0.01,  'm^2'}; % Cross-sectional area at port A
end
parameters (ExternalAccess = none)
    area_B = {0.01,  'm^2'}; % Cross-sectional area at port B
    area_C = {0.01,  'm^2'}; % Cross-sectional area at port C
    area_D = {0.01,  'm^2'}; % Cross-sectional area at port D
end
parameters (ExternalAccess = none)
    volume = {0.001, 'm^3'}; % Volume 
steady_state_init = false;  % Steady-state initialization
    p_init = {0.101325, 'MPa'}; % Initial gas pressure
    T_init = {293.15,   'K'  }; % Initial gas temperature
end

% Parameter groups
annotations
    UILayout = [
        UIGroup('Parameters', ...
        volume, num_ports, area_A, area_B, area_C, area_D)
        UIGroup('Initial Conditions', ...
        steady_state_init, p_init, T_init)]
end

% Icons
if num_ports == foundation.enum.num_ports.one
    annotations
        Icon = 'constant_volume_chamber.svg';
    end
elseif num_ports == foundation.enum.num_ports.two
    annotations
        Icon = 'constant_volume_chamber_2ports.svg';
    end
elseif num_ports == foundation.enum.num_ports.three
    annotations
        Icon = 'constant_volume_chamber_3ports.svg';
    end
else % num_ports == foundation.enum.num_ports.four
    annotations
        Icon = 'constant_volume_chamber_4ports.svg';
    end
end

% Parameter checks and visibility
equations
    assert(volume > 0)
    assert(area_A > 0)
end
if num_ports >= 2
    annotations
        [B, area_B] : ExternalAccess = modify;
        [mdot_B, Phi_B] : ExternalAccess = observe;
    end
    equations
        assert(area_B > 0)
    end
end
if num_ports >= 3
    annotations
        [C, area_C] : ExternalAccess = modify;
        [mdot_C, Phi_C] : ExternalAccess = observe;
    end
    equations
        assert(area_C > 0)
    end
end
if num_ports >= 4
    annotations
        [D, area_D] : ExternalAccess = modify;
        [mdot_D, Phi_D] : ExternalAccess = observe;
    end
    equations
        assert(area_D > 0)
    end
end

% Replace differential variable priorities with "none" when initializing at steady-state
if ~steady_state % transient
    annotations
        [volume,steady_state_init] : ExternalAccess = modify;
    end
    if ~steady_state_init % transient initialisation
        annotations
            [p_init, T_init] : ExternalAccess = modify;
        end
        parameters (Access = private)
            pT_priority = priority.high;
        end
    else % steady-state initialisation
        parameters (Access = private)
            pT_priority = priority.none;
        end
    end
else % steady-state
    parameters (Access = private)
        pT_priority = priority.none;
    end
end

variables (Access = protected)
    mdot_A = {0, 'kg/s'}; % Mass flow rate into port A
    Phi_A  = {0, 'kW'  }; % Energy flow rate into port A
    Q_H    = {0, 'kW'  }; % Heat flow rate into port H

    p_I = {value = p_init, priority = pT_priority}; % Pressure of gas volume
    T_I = {value = T_init, priority = pT_priority}; % Temperature of gas volume
end
variables (Access = protected, ExternalAccess = none)
    mdot_B = {0, 'kg/s'}; % Mass flow rate into port B
    mdot_C = {0, 'kg/s'}; % Mass flow rate into port C
    mdot_D = {0, 'kg/s'}; % Mass flow rate into port D
    Phi_B  = {0, 'kW'  }; % Energy flow rate into port B
    Phi_C  = {0, 'kW'  }; % Energy flow rate into port C
    Phi_D  = {0, 'kW'  }; % Energy flow rate into port D
end

branches
    mdot_A : A.mdot -> *;
    mdot_B : B.mdot -> *;
    mdot_C : C.mdot -> *;
    mdot_D : D.mdot -> *;
    Phi_A  : A.Phi  -> *;
    Phi_B  : B.Phi  -> *;
    Phi_C  : C.Phi  -> *;
    Phi_D  : D.Phi  -> *;
    Q_H    : H.Q    -> *;
end

intermediates (Access = private, ExternalAccess = none)
    % Log temperature
    log_T_I = simscape.function.logProtected(T_I/A.T_unit, 1);

    % Log pressure
    log_p_I = simscape.function.logProtected(p_I/A.p_unit, 1);

    % Specific heat at constant pressure (for perfect and semiperfect gas)
    cp_I = ...
        if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
            A.cp_ref ...
        elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.T_TLU1, A.cp_TLU1, T_I, interpolation = linear, extrapolation = linear) ...
        else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
            {1, 'kJ/(kg*K)'} ...
        end;

    % Derivative of density and density * internal energy
    % with respect to pressure and temperature (for real gas)
    % Use log-space to improve accuracy
    [drho_dp_I, drho_dT_I, drhou_dp_I, drhou_dT_I] = ...
        if A.gas_spec == foundation.enum.gas_spec.real_gas, ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_drho_dp_TLU2, log_T_I, log_p_I, interpolation = linear, extrapolation = linear)) * A.drho_dp_unit; ...
            -exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_drho_dT_TLU2, log_T_I, log_p_I, interpolation = linear, extrapolation = linear)) * A.drho_dT_unit; ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.drhou_dp_TLU2, T_I, p_I, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.drhou_dT_TLU2, T_I, p_I, interpolation = linear, extrapolation = linear) ...
        else ...
            A.drho_dp_unit; ...
            A.drho_dT_unit; ...
            1; ...
            {1, 'kJ/(m^3*K)'} ...
        end;

    % Partial derivatives of mass and internal energy
    % with respect to pressure and temperature at constant volume
    [dMdp, dMdT, dUdp, dUdT] = ...
        if A.gas_spec ~= foundation.enum.gas_spec.real_gas, ...
            volume * rho_I / p_I; ...
            -volume * rho_I / T_I; ...
            volume * (h_I / (A.Z * A.R * T_I) - 1); ...
            volume * rho_I * (cp_I - h_I/T_I) ...
        else ...
            volume * drho_dp_I; ...
            volume * drho_dT_I; ...
            volume * drhou_dp_I; ...
            volume * drhou_dT_I ...
        end;
end

% For logging
intermediates (Access = private)
    % Thermal equation of state
    % Use log-space to improve accuracy
    rho_I = ...
        if A.gas_spec ~= foundation.enum.gas_spec.real_gas, ...
            exp(log_p_I - A.log_ZR - log_T_I) * A.rho_unit ...
        else ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_I, log_p_I, interpolation = linear, extrapolation = linear)) * A.rho_unit ...
        end; % Density of gas volume

    % Caloric equation of state
    h_I = ...
        if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
            A.h_ref + A.cp_ref*(T_I - A.T_ref) ...
        elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_I, interpolation = linear, extrapolation = linear) ...
        else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_I, p_I, interpolation = linear, extrapolation = linear) ...
        end; % Specific enthalpy of gas volume
end

% Balance inflow and outflow at t = 0 when initializing at steady-state
if steady_state
    equations
        mdot_A + mdot_B + mdot_C + mdot_D == 0;
        Phi_A + Phi_B + Phi_C + Phi_D + Q_H == 0;
    end
else

    if steady_state_init
        equations (Initial = true)
            mdot_A + mdot_B + mdot_C + mdot_D == 0;
            Phi_A + Phi_B + Phi_C + Phi_D + Q_H == 0;
        end
    end

    equations
        % Mass conservation
        der(p_I)*dMdp + der(T_I)*dMdT == mdot_A + mdot_B + mdot_C + mdot_D;

        % Energy conservation
        der(p_I)*dUdp + der(T_I)*dUdT == Phi_A + Phi_B + Phi_C + Phi_D + Q_H;
    end
end

equations
    % Assume no flow resistance
    A.p == p_I;
    B.p == p_I;
    C.p == p_I;
    D.p == p_I;

    % Assume no thermal resistance
    H.T == T_I;

    let
        % Indicator variables for the valid region of the property tables
        indicator_pT_I = ...
            if (A.gas_spec == foundation.enum.gas_spec.real_gas) && (A.pT_region_flag == foundation.enum.pT_region_G.validity_matrix), ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, T_I, p_I, interpolation = linear, extrapolation = linear) ...
            else ...
                1 ...
            end;
    in
        % Pressure and temperature must be within the valid region
        assert(indicator_pT_I > 0, message('physmod:simscape:library:gas:PressureTemperatureVolumeValidRegion'))
        assert(p_I >= A.p_min)
        assert(p_I <= A.p_max)
        assert(T_I >= A.T_min)
        assert(T_I <= A.T_max)
    end
end

% Internal component that calculates energy convection at port A
components (ExternalAccess = none)
    convection_A = foundation.gas.port_convection(flow_area = area_A);
end
connections
    connect(A, convection_A.port)
end

% Equate variables for internal component that calculates energy convection at port A
equations
    convection_A.mdot == mdot_A;
    convection_A.Phi  == Phi_A;
    convection_A.ht_I == h_I + (mdot_A/area_A/rho_I)^2/2;
end

if num_ports >= 2
    % Internal component that calculates energy convection at port B
    components (ExternalAccess = none)
        convection_B = foundation.gas.port_convection(flow_area = area_B);
    end
    connections
        connect(B, convection_B.port)
    end
    % Equate variables for internal component that calculates energy convection at port B
    equations
        convection_B.mdot == mdot_B;
        convection_B.Phi  == Phi_B;
        convection_B.ht_I == h_I + (mdot_B/area_B/rho_I)^2/2;
    end
else
    equations
        B.T == T_I;
    end
end

if num_ports >= 3
    % Internal component that calculates energy convection at port C
    components (ExternalAccess = none)
        convection_C = foundation.gas.port_convection(flow_area = area_C);
    end
    connections
        connect(C, convection_C.port)
    end
    % Equate variables for internal component that calculates energy convection at port C
    equations
        convection_C.mdot == mdot_C;
        convection_C.Phi  == Phi_C;
        convection_C.ht_I == h_I + (mdot_C/area_C/rho_I)^2/2;
    end
else
    equations
        C.T == T_I;
    end
end

if num_ports >= 4
    % Internal component that calculates energy convection at port D
    components (ExternalAccess = none)
        convection_D = foundation.gas.port_convection(flow_area = area_D);
    end
    connections
        connect(D, convection_D.port)
    end
    % Equate variables for internal component that calculates energy convection at port D
    equations
        convection_D.mdot == mdot_D;
        convection_D.Phi  == Phi_D;
        convection_D.ht_I == h_I + (mdot_D/area_D/rho_I)^2/2;
    end
else
    equations
        D.T == T_I;
    end
end

end