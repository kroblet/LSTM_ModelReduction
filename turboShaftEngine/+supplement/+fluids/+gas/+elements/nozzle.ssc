component nozzle
% Subsonic Nozzle (G) : 1.6
% This block models the pressure loss due to a flow area restriction such
% as a valve or an orifice in a gas network. There is no heat exchange with
% the environment. Choking occurs when the restriction flow reaches the
% speed of sound. The restriction area can be optionally set by the
% physical signal port AR [m^2]. The input is limited by the minimum and
% maximum restriction area.

% Copyright 2016-2021 The MathWorks, Inc.

nodes
    A = foundation.gas.gas;                          % A:left
    B = foundation.gas.gas;                          % B:right
end

outputs
    Mach_out = {0,'1'}; %Mach_R:right
%     Thrust = {0,'kN'};  %Thrust:right
end

parameters
%     p_reference           = {0.101325,  'MPa'}; % Reference pressure for corrected flow
%     T_reference           = {288.15,  'K'  }; % Reference temperature for corrected flow
    area_A                = {1, 'm^2'}; % Inlet area at port A
    area_R                = {0.1, 'm^2'}; % Inlet area at port R
    area_B                = {1, 'm^2'}; % Outlet area at port B
    min_area      = 1e-3;          % Minimum area
    max_area      = 1;             % Maximum area
    Cd = 1;
    choked_tol = 0.02;
end
 
% Parameter checks
equations   
%     assert(p_reference > 0)
%     assert(T_reference > 0)
    assert(area_A > 0)
    assert(area_B > 0)
    assert(min_area > 0)
    assert(max_area >= min_area)
end

variables (Access = protected)
    mdot_A = {0, 'kg/s'}; % Mass flow rate into port A
    mdot_B = {0, 'kg/s'}; % Mass flow rate into port B
    Phi_A  = {0, 'kW'  }; % Energy flow rate into port A
    Phi_B  = {0, 'kW'  }; % Energy flow rate into port B
end

variables (Access = protected)%, ExternalAccess = none
    p_R      = {0.1, 'MPa'};    % Pressure at port R
    T_R      = {300, 'K'};      % Temperature at port R
    
    T_A      = {300, 'K'}; % Temperature at port A
    T_B      = {300, 'K'}; % Temperature at port B
    T_B_isen = {300, 'K'}; % Isentropic temperature at port B
    
    pt      = {0.1, 'MPa'};    % Pressure at port R
    Tt      = {300, 'K'}; % Temperature at port A
end

branches
    mdot_A : A.mdot -> *;
    mdot_B : B.mdot -> *;
    Phi_A  : A.Phi  -> *;
    Phi_B  : B.Phi  -> *;
end

intermediates (Access = private)%, ExternalAccess = none
    % Port pressure
    p_A = A.p;
    p_B = B.p;
    
    % Log temperature
    log_T_A      = simscape.function.logProtected(T_A     /A.T_unit, 1);
    log_T_B      = simscape.function.logProtected(T_B     /A.T_unit, 1);
    log_T_R      = simscape.function.logProtected(T_R     /A.T_unit, 1);
    log_T_B_isen = simscape.function.logProtected(T_B_isen/A.T_unit, 1);
    log_Tt = simscape.function.logProtected(Tt/A.T_unit, 1);

    % Log pressure
    log_p_A = simscape.function.logProtected(p_A/A.p_unit, 1);
    log_p_B = simscape.function.logProtected(p_B/A.p_unit, 1);
    log_p_R = simscape.function.logProtected(p_R/A.p_unit, 1);
    log_pt = simscape.function.logProtected(pt/A.p_unit, 1);

    % Thermal equation of state
    % Use log-space to improve accuracy
    [rho_A, rho_B, rho_R, rho_B_isen, rhot] = ...
        if A.gas_spec ~= foundation.enum.gas_spec.real_gas, ...
            exp(log_p_A - A.log_ZR - log_T_A     ) * A.rho_unit; ...
            exp(log_p_B - A.log_ZR - log_T_B     ) * A.rho_unit; ...
            exp(log_p_R - A.log_ZR - log_T_R     ) * A.rho_unit; ...
            exp(log_p_B - A.log_ZR - log_T_B_isen) * A.rho_unit; ...
            exp(log_pt - A.log_ZR - log_Tt) * A.rho_unit ...
        else ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_A,      log_p_A, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_B,      log_p_B, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_R,      log_p_R, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_B_isen, log_p_B, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_Tt, log_pt, interpolation = linear, extrapolation = linear)) * A.rho_unit ...
        end;

    % Caloric equation of state
    [h_A, h_B, h_R, h_B_isen, ht] = ...
        if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
            A.h_ref + A.cp_ref*(T_A      - A.T_ref); ...
            A.h_ref + A.cp_ref*(T_B      - A.T_ref); ...
            A.h_ref + A.cp_ref*(T_R      - A.T_ref); ...
            A.h_ref + A.cp_ref*(T_B_isen - A.T_ref); ...
            A.h_ref + A.cp_ref*(Tt       - A.T_ref) ...
        elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_A,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_B,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_R,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_B_isen, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.h_TLU1, Tt, interpolation = linear, extrapolation = linear) ...
        else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_A,      p_A, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_B,      p_B, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_R,      p_R, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_B_isen, p_B, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, Tt, pt, interpolation = linear, extrapolation = linear) ...
        end;

    % Specific total enthalpy
    ht_A      = h_A      + (mdot_A/area_A/rho_A     )^2/2;
    ht_B      = h_B      + (mdot_B/area_B/rho_B     )^2/2;
    ht_R      = h_R      + (mdot_A/area_R/rho_R     )^2/2;
%     ht_B_isen = h_B_isen + (mdot_B/area_B/rho_B_isen)^2/2;

    % Integral of dh/T table lookup (for semiperfect gas only)
    [int_dh_T_A, int_dh_T_R, int_dh_T_B_isen, int_dh_Tt] = ...
        if A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.log_T_TLU1, A.int_dh_T_TLU1, log_T_A,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU1, A.int_dh_T_TLU1, log_T_R,      interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU1, A.int_dh_T_TLU1, log_T_B_isen, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU1, A.int_dh_T_TLU1, log_Tt, interpolation = linear, extrapolation = linear) ...
        else ...
            {1, 'kJ/(kg*K)'}; ...
            {1, 'kJ/(kg*K)'}; ...
            {1, 'kJ/(kg*K)'}; ...
            {1, 'kJ/(kg*K)'} ...
        end;

    % Specific entropy table lookup (for real gas only)
    [s_A, s_R, s_B_isen, st] = ...
        if A.gas_spec == foundation.enum.gas_spec.real_gas, ...
            tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.s_TLU2, log_T_A,      log_p_A, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.s_TLU2, log_T_R,      log_p_R, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.s_TLU2, log_T_B_isen, log_p_B, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.s_TLU2, log_Tt, log_pt, interpolation = linear, extrapolation = linear) ...
        elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            int_dh_T_A - A.Z*A.R*log_p_A; ...
            int_dh_T_R - A.Z*A.R*log_p_R; ...
            int_dh_T_B_isen - A.Z*A.R*log_p_B; ...
            int_dh_Tt - A.Z*A.R*log_pt ...
        else ...
            A.cp_ref*log_T_A - A.Z*A.R*log_p_A; ...
            A.cp_ref*log_T_R - A.Z*A.R*log_p_R; ...
            A.cp_ref*log_T_B_isen - A.Z*A.R*log_p_B; ...
            A.cp_ref*log_Tt - A.Z*A.R*log_pt ...
        end;
    
    % Speed of sound
    T_B_limited = if ge(T_B, A.T_min), T_B else A.T_min end;
    T_R_limited = if ge(T_R, A.T_min), T_R else A.T_min end;
    [a_B,a_R] = ...
        if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
            sqrt(A.cp_ref / A.cv_ref * A.Z * A.R * T_B_limited); ...
            sqrt(A.cp_ref / A.cv_ref * A.Z * A.R * T_R_limited) ...
        elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.T_TLU1, A.a_TLU1, T_B_limited, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.a_TLU1, T_R_limited, interpolation = linear, extrapolation = linear) ...
        else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
            tablelookup(A.T_TLU2, A.p_TLU2, A.a_TLU2, T_B_limited, p_B, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.a_TLU2, T_R_limited, p_R, interpolation = linear, extrapolation = linear) ...
        end;
    
    % Pressure ratio
    r = p_B/pt;

end

% For logging
intermediates (Access = private)
    fluid_power           = mdot_A * delta_ht; % Power extracted from the gas flow
    delta_ht              = ht_A - ht_B;      % Actual change in specific total enthalpy
    delta_ht_isen         = ht_A - h_B_isen; % Isentropic change in specific total enthalpy
    inlet_velocity        = mdot_A / rho_A / area_A; % Inlet flow velocity
    outlet_velocity       = - mdot_B / rho_B / area_B / a_B; % Outlet flow velocity
    
    v_R                   = mdot_A / rho_R / area_R; % Restriction velocity
    Mach_R = if ge(v_R, 0), v_R/a_R else -v_R/a_R end; % Mach number at the restriction
    
    Kn = ...
        if lt((r-1)^2, 1e-3), ...
            0 ...
        else ...
%              2*1.4/(1.4-1) * r^(2/1.4) * (1 - r^((1.4-1)/1.4) ) ...
%             sqrt( 1.4 * (2/(1.4+1))^((1.4+1)/(1.4-1)) )...
             sqrt(2 * (1 - r))  ...
        end;
    Kn_sqr = Kn * sqrt(Kn^2 + 0.0001);
    mdot_sqr = mdot_A * sqrt(mdot_A^2 + {0.01,'kg/s'}^2);
end

equations
    % Mass balance
    mdot_A + mdot_B == 0;

    % Energy balance
    Phi_A + Phi_B == 0;

%     % Corrected mass flow rate
%     mdot_A * sqrt(T_A/T_reference) == mdot_corrected * (p_A/p_reference);
% relate pressure to mass flow

%      mdot_A == {25,'kg/s'} ;%Cd * area_R * Kn * sqrt( pt * rhot );
%  mdot_A == Cd * area_R * sqrt(Kn_sqr) * sqrt( pt * rhot );
%   mdot_A == Cd * area_R * Kn * sqrt( pt * rhot );
Kn_sqr * (pt * rhot) == mdot_sqr / (Cd * area_R)^2;
 
%     Mach_R == 1; % Mach number at R
%     mdot_A == area_R * p_A / sqrt(T_A) * sqrt(1.4 / A.R) * Mach_R * (1 + (1.4-1)/2 *Mach_R^2) ^(- (1.4+1)/(2*(0.4)));

Mach_out == Mach_R;

% inlet_velocity == sqrt( A.R * T_A * 2*1.4/(1.4-1) * (1 - (p_R/p_A)^((1.4-1)/1.4)) + {0.001,'m/s'}^2);
%     mdot_A 

    % Isentropic efficiency
    ht == ht_A;
    ht == ht_R;
    ht_A == ht_B;
    ht_B == convection_B.ht_I;

%     delta_ht == 1.0 * delta_ht_isen;
 
    % Isentropic relation
    s_A == s_B_isen;
    s_A == s_R;
    st == s_A;
    
    let
        % Indicator variables for the valid region of the property tables
        [indicator_pT_A, indicator_pT_B] = ...
            if (A.gas_spec == foundation.enum.gas_spec.real_gas) && (A.pT_region_flag == foundation.enum.pT_region_G.validity_matrix), ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, A.T, A.p, interpolation = linear, extrapolation = linear); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, B.T, B.p, interpolation = linear, extrapolation = linear) ...
            else ...
                1; ...
                1 ...
            end;
    in
        % Pressure and temperature must be within the valid region
        assert(indicator_pT_A > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'A'))
        assert(A.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'A'))
        assert(A.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'A'))
        assert(A.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'A'))
        assert(A.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'A'))
        assert(indicator_pT_B > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'B'))
        assert(B.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'B'))
        assert(B.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'B'))
        assert(B.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'B'))
        assert(B.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'B'))
    end
end

% Internal components that calculate energy convection at ports A and B
components (ExternalAccess = none)
    convection_A = foundation.gas.port_convection(flow_area = area_A);
    convection_B = foundation.gas.port_convection(flow_area = area_B);
end
connections
    connect(A, convection_A.port)
    connect(B, convection_B.port)
end

% Equate variables for internal components that calculate energy convection at ports A and B
equations
    convection_A.mdot == mdot_A;
    convection_A.Phi  == Phi_A;
    convection_B.mdot == mdot_B;
    convection_B.Phi  == Phi_B;

    convection_A.ht_I == convection_B.ht_I;
end
 
end