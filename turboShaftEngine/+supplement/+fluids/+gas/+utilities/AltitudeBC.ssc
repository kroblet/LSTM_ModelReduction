component AltitudeBC
% Altitude Boundary Condition (G) :2.0
%
% Provide boundary pressure and temperature conditions for the input 
% altitude. This model implements the barometric formula given at
% https://en.wikipedia.org/wiki/Barometric_formula
% 
% Copyright 2017-2020 MathWorks.

nodes
  G = foundation.gas.gas; % G:right
end

inputs
  alt_in = {0, 'm'};   % alt:left
end

parameters
  altitude = {[0 11000 20000 32000 47000 51000 71000], 'm'}; % Altitude breakpoints
  press    = {[101325 2.263210e+04 5.474890e+03, ...
    8.680200e+02 1.109100e+02 6.694000e+01 ...
    3.960000e+00], 'Pa'};                      % Pressure
  temp     = {[2.881500e+02 2.166500e+02 2.166500e+02 ...
    2.286500e+02 2.706500e+02 2.706500e+02 ...
    2.146500e+02], 'K'};                       % Temperature
  tlapse   = {[-6.500000e-03 0 1.000000e-03 2.800000e-03...
    0 -2.800000e-03 -2.000000e-03], 'K/m'};      % Temperature lapse
  tix      = {[1 2 3 4 5 6 7], '1'};                          % Tlapse LUT
  
  R = {8.3144598, 'J/mol/K'};
  g = {9.80665,   'm/s^2'};
  M = {0.0289644, 'kg/mol'};
  port_area = {0.01, 'm^2'};
end

equations
  assert(alt_in >= 0, 'Altitude must be greater than 0');
  assert(alt_in <= max(altitude), 'Maximum altitude exceeded.', Warn=true);
end

intermediates
  Tselect = floor(tablelookup(altitude, tix, alt_in, interpolation = linear));
  Trate = tablelookup(tix, tlapse, Tselect, interpolation = linear);
  
  Tb = temp(Tselect);
  hb = altitude(Tselect);
  Pb = press(Tselect);
  Lb = tlapse(Tselect);
end
equations
  if(Trate ~= 0)
    Res.p_in == Pb*(Tb/(Tb + Lb*(alt_in - hb)))^(g*M/R/Lb);
    
  else
    Res.p_in == Pb*exp(-g*M*(alt_in-hb)/R/Tb);
    
  end
  Res.T_in == Tb + Lb*(alt_in - hb);
  
end
components(ExternalAccess = observe)
  Res = foundation.gas.elements.controlled_reservoir(area_A = port_area);
end
connections
  connect(Res.A, G);
end

end