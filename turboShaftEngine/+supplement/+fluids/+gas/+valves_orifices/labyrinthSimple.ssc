component labyrinthSimple < supplement.fluids.gas.branch
    % Labyrinth Simple (G) : 1.5
    % Correlations implemented from:
    % H. Zimmermann, K.H. Wolff, Air System Correlations: Part 1 â€” Labyrinth Seals, (1998) 
    % V004T09A048. http://dx.doi.org/10.1115/98-GT-206. 

    % Copyright 2017-2022 The MathWorks, Inc.

    parameters (ExternalAccess = modify)
        annular_area = {1e-3,  'm^2'}; % Annular area
        Cd           = {0.71,  '1'  }; % Discharge coefficient
        
        ct           = {2 , '1'     }; % Clearance-to-thickness ratio
        nt           = {3,     '1'  }; % Number of teeth

        B_lam        = {0.999, '1'  }; % Laminar flow pressure ratio
    end

    annotations
        Icon = 'labyrinth.svg';
    end

    % Parameter visibility and checks
    equations
        assert(Cd > 0)
        assert(annular_area > 0)
        assert(annular_area < area)
        assert(ct > 0)
        assert(nt > 0)
        assert(B_lam > 0)
        assert(B_lam < 1)
    end

    % Determine the sonic conductance and critical pressure ratio used in equation
    parameters (Access = private)
        p_unit = {1, 'bar'};
    end

    intermediates (Access = private, ExternalAccess = none)
        % Average quantities
        p_avg   = (p_A   + p_B  )/2;
        T_avg   = (T_A   + T_B  )/2;
        rho_avg = (rho_A + rho_B)/2;

        % Inlet and outlet quantities
        [p_in, p_out, T_in, rho_in, dir] = ...
            if gt(p_A, p_B), ...
                p_A; p_B; T_A; rho_A; 1 ...
            elseif lt(p_A, p_B), ...
                p_B; p_A; T_B; rho_B; -1 ...
            else ...
                p_avg; p_avg; T_avg; rho_avg; 0 ...
            end;
        
        % Exponents involving gamma in equations
        gamma1 = (gamma - 1)/gamma;
        gamma2 = 2/gamma;
        gamma3 = 2*(gamma - 2)/gamma;

        % Critical pressure ratio
        B_crit = (2/(gamma + 1))^(1/gamma1);
        PR_crit = (1 + (gamma - 1)/2) ^((gamma-1)/gamma);

        % Orifice area ratio
        area_ratio = annular_area / area;

        % Non-dimensionalize pressure to handle non-integer exponent gamma
        p_A_unit   =       p_A  /p_unit;
        p_B_unit   =       p_B  /p_unit;
        p_avg_unit = neabs(p_avg/p_unit);
        p_in_unit  = neabs(p_in /p_unit);
        p_out_unit = neabs(p_out/p_unit);
    end

    intermediates
        % Estimation of carry-over factor, K
        Kco = sqrt( nt/(nt-1) * 1/ (1 - (nt-1)/nt * ct/(ct+0.02) ) );
        
%         % Mass flow rate from port A to port B assuming no choke
%         mdot_unchoked = Kco * Cd * annular_area * sqrt(2*p_unit/gamma1) * (p_A_unit^gamma1 - p_B_unit^gamma1) ...
%             / ((p_in_unit/p_out_unit^2)^gamma2 / rho_in^2 * (1 - area_ratio^2 * (p_out_unit/p_in_unit)^gamma2)^2 * (p_A_unit^gamma1 - p_B_unit^gamma1)^2 ...
%             + p_avg_unit^gamma3 / rho_avg^2 * (1/B_lam^gamma2 - area_ratio^2)^2 * (1 - B_lam^gamma1)^2)^0.25;
% 
%         % Choked mass flow rate (always positive)
%         mdot_choked = Kco * Cd * annular_area * sqrt(2*p_unit/gamma1) * p_in_unit^gamma1 * (gamma - 1) / (gamma + 1) ...
%             / (p_in_unit^gamma3 / rho_in^2 * (((gamma + 1)/2)^(2/(gamma-1)) - area_ratio^2)^2 * (gamma - 1)^2 / (gamma + 1)^2 ...
%             + p_avg_unit^gamma3 / rho_avg^2 * (1/B_lam^gamma2 - area_ratio^2)^2 * (1 - B_lam^gamma1)^2)^0.25;
        
% Using linearised flow function
        % Mass flow rate from port A to port B assuming no choke
        mdot_unchoked = Cd * Kco * annular_area * ( p_A / sqrt(gamma1 * ht_A) ) * ...
            sqrt( (1 - (p_out_unit / p_in_unit)^2) / (nt + log( p_in_unit / p_out_unit ) ) );
        
        % Choked mass flow rate (always positive)
        mdot_choked = Cd * Kco * annular_area * ( p_A / sqrt(gamma1 * ht_A) ) * ...
            sqrt( (1 - (1 / PR_crit)^2) / (nt + log( PR_crit ) ) );
    end

    equations
        % Mass flow rate through orifice
        mdot_A == ...
            if ge(p_out/p_in, B_crit), ...
                if le(dir*mdot_unchoked, mdot_choked), ...
                    mdot_unchoked ...
                else ...
                    dir*mdot_choked ...
                end ...
            else ...
                dir*mdot_choked ...
            end;

        % Mass balance
        mdot_A + mdot_B == 0;

        % Energy balance
        Phi_A + Phi_B == 0;
    end
end