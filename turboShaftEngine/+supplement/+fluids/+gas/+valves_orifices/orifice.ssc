component orifice
% Orifice (G) : 1.5
% This block models the pressure loss due to a constant or variable orifice
% in a gas network. In the variable option, control member opening fraction
% is set by the physical signal input L. The orifice is closed when L = 0
% and fully open when L = 1. Choking occurs when the pressure ratio across
% the orifice reaches the critical pressure ratio. There is no heat
% exchange with the environment.

% Copyright 2017-2022 The MathWorks, Inc.

nodes
    A = foundation.gas.gas; % A
    B = foundation.gas.gas; % B
end

inputs (ExternalAccess = none)
    % Control member opening fraction
    L = {1, '1'}; % L
end

annotations
    [A, L] : Side = left;
    B      : Side = right;
end

parameters
    orifice_type = foundation.enum.constant_variable.variable; % Orifice type
    %                                                            1 - Constant
    %                                                            2 - Variable
    orifice_parameterization = supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Cv; % Orifice parameterization
    %                                                                                        1 - Cv
    %                                                                                        2 - Kv
    %                                                                                        3 - SonicConductance
    %                                                                                        4 - Area
end
parameters (ExternalAccess = none)
    opening_characteristic = supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear; % Opening characteristic
    %                                                                                         1 - Linear
    %                                                                                         2 - Tabulated

    Cv_constant = {4,     '1'}; % Cv flow coefficient
    Cv_max      = {4,     '1'}; % Maximum Cv flow coefficient
    L_Cv_TLU    = {0 : 0.2 : 1,                   '1'}; % Opening fraction vector
    Cv_TLU      = {[1e-6, 0.8, 1.6, 2.4, 3.2, 4], '1'}; % Cv flow coefficient vector
    xT_Cv       = {0.7,   '1'}; % xT pressure differential ratio factor at choked flow

    Kv_constant = {3.6,  '1'}; % Kv flow coefficient
    Kv_max      = {3.6,  '1'}; % Maximum Kv flow coefficient
    L_Kv_TLU    = {0 : 0.2 : 1,                         '1'}; % Opening fraction vector
    Kv_TLU      = {[1e-6, 0.72, 1.44, 2.16, 2.88, 3.6], '1'}; % Kv flow coefficient vector
    xT_Kv       = {0.7,  '1'}; % xT pressure differential ratio factor at choked flow

    C_constant      = {12,     'l/(s*bar)'}; % Sonic conductance
    B_crit_constant = {0.3,    '1'        }; % Critical pressure ratio
    C_max           = {12,     'l/(s*bar)'}; % Maximum sonic conductance
    B_crit_linear   = {0.3,    '1'        }; % Critical pressure ratio
    L_C_TLU         = {0 : 0.2 : 1,                    '1'        }; % Opening fraction vector
    C_TLU           = {[1e-5, 2.4, 4.8, 7.2, 9.6, 12], 'l/(s*bar)'}; % Sonic conductance vector
    B_crit_TLU      = {0.3 * ones(1, 6),               '1'        }; % Critical pressure ratio vector
    m               = {0.5,    '1'        }; % Subsonic index
    T_ref_C         = {293.15, 'K'        }; % ISO reference temperature
    rho_ref_C       = {1.185,  'kg/m^3'   }; % ISO reference density

    orifice_area_constant = {1e-4,  'm^2'}; % Orifice area
    orifice_area_max      = {1e-4,  'm^2'}; % Maximum orifice area
    L_orifice_area_TLU    = {0 : 0.2 : 1,                                   '1'  }; % Opening fraction vector
    orifice_area_TLU      = {[1e-10, 0.2e-4, 0.4e-4, 0.6e-4, 0.8e-4, 1e-4], 'm^2'}; % Orifice area vector
    Cd                    = {0.64,  '1'  }; % Discharge coefficient

    leakage_fraction = {1e-6, '1'}; % Leakage flow fraction
    smoothing_factor = {0.01, '1'}; % Smoothing factor
end
parameters
    B_lam = {0.999, '1'  }; % Laminar flow pressure ratio
    area  = {0.01,  'm^2'}; % Cross-sectional area at ports A and B
end

% Parameter visibility and checks
if orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Cv
    annotations
        xT_Cv : ExternalAccess = modify;
    end
    equations
        assert(xT_Cv > 0)
        assert(xT_Cv < 1)
    end
    if orifice_type == foundation.enum.constant_variable.constant
        annotations
            Cv_constant : ExternalAccess = modify;
        end
        equations
            assert(Cv_constant > 0)
        end
    else % orifice_type == foundation.enum.constant_variable.variable
        annotations
            opening_characteristic : ExternalAccess = modify
        end
        if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
            annotations
                Cv_max : ExternalAccess = modify;
            end
            equations
                assert(Cv_max > 0)
            end
        else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
            annotations
                [L_Cv_TLU, Cv_TLU] : ExternalAccess = modify;
            end
            equations
                assert(numel(L_Cv_TLU) >= 2)
                assert(numel(Cv_TLU) == numel(L_Cv_TLU))
                assert(all(diff(L_Cv_TLU) > 0))
                assert(all(diff(Cv_TLU) > 0))
                assert(all(Cv_TLU(:) > 0))
            end
        end
    end
elseif orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Kv
    annotations
        xT_Kv : ExternalAccess = modify;
    end
    equations
        assert(xT_Kv > 0)
        assert(xT_Kv < 1)
    end
    if orifice_type == foundation.enum.constant_variable.constant
        annotations
            Kv_constant : ExternalAccess = modify;
        end
        equations
            assert(Kv_constant > 0)
        end
    else % orifice_type == foundation.enum.constant_variable.variable
        annotations
            opening_characteristic : ExternalAccess = modify
        end
        if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
            annotations
                Kv_max : ExternalAccess = modify;
            end
            equations
                assert(Kv_max > 0)
            end
        else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
            annotations
                [L_Kv_TLU, Kv_TLU] : ExternalAccess = modify;
            end
            equations
                assert(numel(L_Kv_TLU) >= 2)
                assert(numel(Kv_TLU) == numel(L_Kv_TLU))
                assert(all(diff(L_Kv_TLU) > 0))
                assert(all(diff(Kv_TLU) > 0))
                assert(all(Kv_TLU(:) > 0))
            end
        end
    end
elseif orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.SonicConductance
    annotations
        [m, T_ref_C, rho_ref_C] : ExternalAccess = modify;
    end
    equations
        assert(m > 0)
        assert(m < 1)
        assert(T_ref_C > 0)
        assert(rho_ref_C > 0)
    end
    if orifice_type == foundation.enum.constant_variable.constant
        annotations
            [C_constant, B_crit_constant] : ExternalAccess = modify;
        end
        equations
            assert(C_constant > 0)
            assert(B_crit_constant >= 0)
            assert(B_crit_constant < B_lam)
        end
    else % orifice_type == foundation.enum.constant_variable.variable
        annotations
            opening_characteristic : ExternalAccess = modify
        end
        if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
            annotations
                [C_max, B_crit_linear] : ExternalAccess = modify;
            end
            equations
                assert(C_max > 0)
                assert(B_crit_linear >= 0)
                assert(B_crit_linear < B_lam)
            end
        else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
            annotations
                [L_C_TLU, C_TLU, B_crit_TLU] : ExternalAccess = modify;
            end
            equations
                assert(numel(L_C_TLU) >= 2)
                assert(numel(C_TLU) == numel(L_C_TLU))
                assert(numel(B_crit_TLU) == numel(L_C_TLU))
                assert(all(diff(L_C_TLU) > 0))
                assert(all(diff(C_TLU) > 0))
                assert(all(C_TLU(:) > 0))
                assert(all(B_crit_TLU(:) >= 0))
                assert(all(B_crit_TLU(:) < B_lam))
            end
        end
    end
else % orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Area
    annotations
        Cd : ExternalAccess = modify;
    end
    equations
        assert(Cd > 0)
    end
    if orifice_type == foundation.enum.constant_variable.constant
        annotations
            orifice_area_constant : ExternalAccess = modify;
        end
        equations
            assert(orifice_area_constant > 0)
            assert(orifice_area_constant < area)
        end
    else % orifice_type == foundation.enum.constant_variable.variable
        annotations
            opening_characteristic : ExternalAccess = modify
        end
        if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
            annotations
                orifice_area_max : ExternalAccess = modify;
            end
            equations
                assert(orifice_area_max > 0)
                assert(orifice_area_max < area)
            end
        else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
            annotations
                [L_orifice_area_TLU, orifice_area_TLU] : ExternalAccess = modify;
            end
            equations
                assert(numel(L_orifice_area_TLU) >= 2)
                assert(numel(orifice_area_TLU) == numel(L_orifice_area_TLU))
                assert(all(diff(L_orifice_area_TLU) > 0))
                assert(all(diff(orifice_area_TLU) > 0))
                assert(all(orifice_area_TLU(:) > 0))
                assert(all(orifice_area_TLU(:) < area))
            end
        end
    end
end

if orifice_type == foundation.enum.constant_variable.variable
    annotations
        L : ExternalAccess = modify;
        Icon = 'orifice_variable.svg';
    end
    if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
        annotations
            [leakage_fraction, smoothing_factor] : ExternalAccess = modify;
        end
        parameters (Access = private)
            % Saturated smoothing factor
            smoothing_factor_sat = if smoothing_factor < 1e-6, 1e-6 else smoothing_factor end;
        end
        equations
            assert(leakage_fraction > 0)
            assert(leakage_fraction < 1)
            assert(smoothing_factor >= 0)
            assert(smoothing_factor <= 1)
        end
    end
end

equations
    assert(B_lam > 0)
    assert(B_lam < 1)
    assert(area > 0)
end

variables (ExternalAccess = observe)
    mdot_A = {0, 'kg/s'}; % Mass flow rate into port A
    mdot_B = {0, 'kg/s'}; % Mass flow rate into port B
    Phi_A  = {0, 'kW'  }; % Energy flow rate into port A
    Phi_B  = {0, 'kW'  }; % Energy flow rate into port B
end

variables (Access = private, ExternalAccess = none)
    T_A = {300, 'K'}; % Temperature at port A
    T_B = {300, 'K'}; % Temperature at port B
end

branches
    mdot_A : A.mdot -> *;
    mdot_B : B.mdot -> *;
    Phi_A  : A.Phi  -> *;
    Phi_B  : B.Phi  -> *;
end

intermediates (Access = private, ExternalAccess = none)
    % Port pressure
    p_A = A.p;
    p_B = B.p;

    % Log temperature
    log_T_A = simscape.function.logProtected(T_A/A.T_unit, 1);
    log_T_B = simscape.function.logProtected(T_B/A.T_unit, 1);

    % Log pressure
    log_p_A = simscape.function.logProtected(p_A/A.p_unit, 1);
    log_p_B = simscape.function.logProtected(p_B/A.p_unit, 1);

    % Thermal equation of state
    % Use log-space to improve accuracy
    [rho_A, rho_B] = ...
        if A.gas_spec ~= foundation.enum.gas_spec.real_gas, ...
            exp(log_p_A - A.log_ZR - log_T_A) * A.rho_unit; ...
            exp(log_p_B - A.log_ZR - log_T_B) * A.rho_unit ...
        else ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_A, log_p_A, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
            exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_B, log_p_B, interpolation = linear, extrapolation = linear)) * A.rho_unit ...
        end;

    % Caloric equation of state
    [h_A, h_B] = ...
        if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
            A.h_ref + A.cp_ref*(T_A - A.T_ref); ...
            A.h_ref + A.cp_ref*(T_B - A.T_ref) ...
        elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_A, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU1, A.h_TLU1, T_B, interpolation = linear, extrapolation = linear) ...
        else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_A, p_A, interpolation = linear, extrapolation = linear); ...
            tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_B, p_B, interpolation = linear, extrapolation = linear) ...
        end;

    % Specific total enthalpy
    ht_A = h_A + (mdot_A/rho_A/area)^2/2;
    ht_B = h_B + (mdot_A/rho_B/area)^2/2;

    % Average quantities
    p_avg   = (p_A   + p_B  )/2;
    T_avg   = (T_A   + T_B  )/2;
    rho_avg = (rho_A + rho_B)/2;

    % Inlet and outlet quantities
    [p_in, p_out, T_in, rho_in, dir] = ...
        if gt(p_A, p_B), ...
            p_A; p_B; T_A; rho_A; 1 ...
        elseif lt(p_A, p_B), ...
            p_B; p_A; T_B; rho_B; -1 ...
        else ...
            p_avg; p_avg; T_avg; rho_avg; 0 ...
        end;
end

if orifice_parameterization ~= supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.SonicConductance
    intermediates (Access = private, ExternalAccess = none)
        % Specific heat
        [cp_A, cp_B, cv_A, cv_B] = ...
            if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
                A.cp_ref; ...
                A.cp_ref; ...
                A.cv_ref; ...
                A.cv_ref ...
            elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
                tablelookup(A.T_TLU1, A.cp_TLU1, T_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU1, A.cp_TLU1, T_B, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU1, A.cv_TLU1, T_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU1, A.cv_TLU1, T_B, interpolation = linear, extrapolation = nearest) ...
            else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
                tablelookup(A.T_TLU2, A.p_TLU2, A.cp_TLU2, T_A, p_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.cp_TLU2, T_B, p_B, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.cv_TLU2, T_A, p_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.cv_TLU2, T_B, p_B, interpolation = linear, extrapolation = nearest) ...
            end;

        % Average ratio of specific heat
        gamma_A = cp_A / cv_A;
        gamma_B = cp_B / cv_B;
        gamma = (gamma_A + gamma_B)/2;
    end
end

% Fraction of max flow at the current control member opening fraction
if orifice_type == foundation.enum.constant_variable.variable && ...
        opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
    intermediates (Access = private, ExternalAccess = none)
        L_sat = ...
            if smoothing_factor == 0, ... % Add zero-crossing
                simscape.function.limit(L, 0, 1, true) ...
            else ...                      % Add smoothing
                fluids.function.smoothLimit(L, 0, 1, smoothing_factor_sat) ...
            end;
        flow_fraction = (1 - leakage_fraction)*L_sat + leakage_fraction;
    end
end

if (orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Cv) || ...
        (orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Kv)

    % Cv and Kv are the same but with a different scale factor
    if orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Cv
        parameters (Access = private)
            xT = xT_Cv;
        end

        % Determine the sonic conductance and critical pressure ratio used in equation
        if orifice_type == foundation.enum.constant_variable.constant
            parameters (Access = private)
                Cv = Cv_constant;
                flow_fraction_ = 1;
            end
        else % orifice_type == foundation.enum.constant_variable.variable
            if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
                intermediates (Access = private, ExternalAccess = none)
                    Cv = Cv_max * flow_fraction;
                    flow_fraction_ = flow_fraction;
                end
            else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
                intermediates (Access = private, ExternalAccess = none)
                    Cv = tablelookup(L_Cv_TLU, Cv_TLU, L, interpolation = linear, extrapolation = nearest);
                    flow_fraction_ = Cv / Cv_TLU(end);
                end
            end
        end
    else % orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Kv
        parameters (Access = private)
            xT = xT_Kv;
            % Conversion factor from Kv to Cv
            Kv2Cv = 1/0.865;
        end

        % Determine the sonic conductance and critical pressure ratio used in equation
        if orifice_type == foundation.enum.constant_variable.constant
            parameters (Access = private)
                Cv = Kv2Cv * Kv_constant;
                flow_fraction_ = 1;
            end
        else % orifice_type == foundation.enum.constant_variable.variable
            if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
                intermediates (Access = private, ExternalAccess = none)
                    Cv = Kv2Cv * Kv_max * flow_fraction;
                    flow_fraction_ = flow_fraction;
                end
            else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
                intermediates (Access = private, ExternalAccess = none)
                    Cv = Kv2Cv * tablelookup(L_Kv_TLU, Kv_TLU, L, interpolation = linear, extrapolation = nearest);
                    flow_fraction_ = Cv / Kv2Cv / Kv_TLU(end);
                end
            end
        end
    end

    parameters (Access = private)
        % Pick the constants for SI (same results when picking constants for USCS)
        N6        = {27.3, '1'     };
        mdot_unit = {1,    'kg/hr' };
        p_unit    = {1,    'bar'   };
        rho_unit  = {1,    'kg/m^3'};
    end

    intermediates (Access = private, ExternalAccess = none)
        % Specific heat ratio factor
        F_gamma = neabs(gamma) / 1.4;

        % Expansion factor
        Y = 1 - (p_in - p_out) / (3 * p_in * F_gamma * xT);

        % Expansion facctor at laminar flow
        Y_lam = 1 - (1 - B_lam) / (3 * F_gamma * xT);

        % Critical pressure ratio
        B_crit = 1 - F_gamma * xT;

        % Mass flow rate from port A to port B assuming no choke
        mdot_unchoked = Cv * N6 * mdot_unit / sqrt(p_unit * rho_unit) * (p_A - p_B) ...
            / ((p_A - p_B)^2 / Y^4 / rho_in^2 + p_avg^2 * (1 - B_lam)^2 / Y_lam^4 / rho_avg^2)^0.25;

        % Choked mass flow rate (always positive)
        mdot_choked = Cv * N6 * mdot_unit / sqrt(p_unit * rho_unit) * 2/3 * p_in * F_gamma * xT ...
            / ((p_in * F_gamma * xT)^2 / rho_in^2 + p_avg^2 * (1 - B_lam)^2 / Y_lam^4 / rho_avg^2)^0.25
    end

elseif orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.SonicConductance

    % Determine the sonic conductance and critical pressure ratio used in equation
    if orifice_type == foundation.enum.constant_variable.constant
        parameters (Access = private)
            C = C_constant;
            B_crit = B_crit_constant;
            flow_fraction_ = 1;
        end
    else % orifice_type == foundation.enum.constant_variable.variable
        if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
            intermediates (Access = private, ExternalAccess = none)
                C = C_max * flow_fraction;
                B_crit = B_crit_linear;
                flow_fraction_ = flow_fraction;
            end
        else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
            intermediates (Access = private, ExternalAccess = none)
                C = tablelookup(L_C_TLU, C_TLU, L, interpolation = linear, extrapolation = nearest);
                B_crit = tablelookup(L_C_TLU, B_crit_TLU, L, interpolation = linear, extrapolation = nearest);
                flow_fraction_ = C / C_TLU(end);
            end
        end
    end

    parameters (Access = private)
        % Exponents involving m in equations
        m1 = 2*(2*m - 1)/(1 - m);
        m2 = 1/(1 - m);
        m3 = m/(1 - m);
        m4 = (1 - m)/2;

        p_unit = {1, 'bar'};
        T_unit = {1, 'K'  };
    end

    intermediates (Access = private, ExternalAccess = none)
        % Non-dimensionalize quantities to handle non-integer exponent gamma
        p_A_unit   =       p_A  /p_unit;
        p_B_unit   =       p_B  /p_unit;
        p_in_unit  = neabs(p_in /p_unit);
        p_out_unit = neabs(p_out/p_unit);
        T_in_unit  = neabs(T_in /T_unit);
        T_avg_unit = neabs(T_avg/T_unit);

        % Mass flow rate from port A to port B assuming no choke
        mdot_unchoked = C * rho_ref_C * p_unit * sqrt(T_ref_C/T_unit) / (1 - B_crit)^(2*m) * (p_A_unit - p_B_unit) ...
            / (p_in_unit^m1 * T_in_unit^m2 * (p_A_unit - p_B_unit)^2 / (((1 - 2*B_crit)*p_in_unit + p_out_unit)^2)^m3 ...
            + T_avg_unit^m2 * (1 - B_lam)^2 / ((1 - 2*B_crit + B_lam)^2)^m3)^m4;

        % Choked mass flow rate (always positive)
        mdot_choked = C * rho_ref_C * p_unit * sqrt(T_ref_C/T_unit) * p_in_unit ...
            / (T_in_unit^m2 + T_avg_unit^m2 * (1 - B_crit)^m1 * (1 - B_lam)^2 / ((1 - 2*B_crit + B_lam)^2)^m3)^m4;
    end

else % orifice_parameterization == supplement.fluids.gas.valves_orifices.enum.OrificeParameterization.Area

    % Determine the sonic conductance and critical pressure ratio used in equation
    if orifice_type == foundation.enum.constant_variable.constant
        parameters (Access = private)
            orifice_area = orifice_area_constant;
            flow_fraction_ = 1;
        end
    else % orifice_type == foundation.enum.constant_variable.variable
        if opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Linear
            intermediates (Access = private, ExternalAccess = none)
                orifice_area = orifice_area_max * flow_fraction;
                flow_fraction_ = flow_fraction;
            end
        else % opening_characteristic == supplement.fluids.gas.valves_orifices.enum.OpeningCharacteristics.Tabulated
            intermediates (Access = private, ExternalAccess = none)
                orifice_area = tablelookup(L_orifice_area_TLU, orifice_area_TLU, L, interpolation = linear, extrapolation = nearest);
                flow_fraction_ = orifice_area / orifice_area_TLU(end);
            end
        end
    end

    parameters (Access = private)
        p_unit = {1, 'bar'};
    end

    intermediates (Access = private, ExternalAccess = none)
        % Exponents involving gamma in equations
        gamma1 = (gamma - 1)/gamma;
        gamma2 = 2/gamma;
        gamma3 = 2*(gamma - 2)/gamma;

        % Critical pressure ratio
        B_crit = (2/(gamma + 1))^(1/gamma1);

        % Orifice area ratio
        area_ratio = orifice_area / area;

        % Non-dimensionalize pressure to handle non-integer exponent gamma
        p_A_unit   =       p_A  /p_unit;
        p_B_unit   =       p_B  /p_unit;
        p_avg_unit = neabs(p_avg/p_unit);
        p_in_unit  = neabs(p_in /p_unit);
        p_out_unit = neabs(p_out/p_unit);

        % Mass flow rate from port A to port B assuming no choke
        mdot_unchoked = Cd * orifice_area * sqrt(2*p_unit/gamma1) * (p_A_unit^gamma1 - p_B_unit^gamma1) ...
            / ((p_in_unit/p_out_unit^2)^gamma2 / rho_in^2 * (1 - area_ratio^2 * (p_out_unit/p_in_unit)^gamma2)^2 * (p_A_unit^gamma1 - p_B_unit^gamma1)^2 ...
            + p_avg_unit^gamma3 / rho_avg^2 * (1/B_lam^gamma2 - area_ratio^2)^2 * (1 - B_lam^gamma1)^2)^0.25;

        % Choked mass flow rate (always positive)
        mdot_choked = Cd * orifice_area * sqrt(2*p_unit/gamma1) * p_in_unit^gamma1 * (gamma - 1) / (gamma + 1) ...
            / (p_in_unit^gamma3 / rho_in^2 * (((gamma + 1)/2)^(2/(gamma-1)) - area_ratio^2)^2 * (gamma - 1)^2 / (gamma + 1)^2 ...
            + p_avg_unit^gamma3 / rho_avg^2 * (1/B_lam^gamma2 - area_ratio^2)^2 * (1 - B_lam^gamma1)^2)^0.25;
    end
end

% For logging and public access
intermediates
    opening_area_fraction = flow_fraction_; % Fraction of orifice area that is open
end
% annotations
%     opening_area_fraction : LoggingUnit = '1';
% end

equations
    % Mass flow rate through orifice
    mdot_A == ...
        if ge(p_out/p_in, B_crit), ...
            if le(dir*mdot_unchoked, mdot_choked), ...
                mdot_unchoked ...
            else ...
                dir*mdot_choked ...
            end ...
        else ...
            dir*mdot_choked ...
        end;

    % Mass balance
    mdot_A + mdot_B == 0;

    % Energy balance
    Phi_A + Phi_B == 0;

    % Specific total enthalpy at internal node
    ht_A == convection_A.ht_I;
    ht_B == convection_B.ht_I;

    let
        % Indicator variables for the valid region of the property tables
        [indicator_pT_A, indicator_pT_B] = ...
            if (A.gas_spec == foundation.enum.gas_spec.real_gas) && (A.pT_region_flag == foundation.enum.pT_region_G.validity_matrix), ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, A.T, A.p, interpolation = linear, extrapolation = linear); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, B.T, B.p, interpolation = linear, extrapolation = linear) ...
            else ...
                1; ...
                1 ...
            end;
    in
        % Pressure and temperature must be within the valid region
        assert(indicator_pT_A > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'A'))
        assert(A.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'A'))
        assert(A.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'A'))
        assert(A.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'A'))
        assert(A.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'A'))
        assert(indicator_pT_B > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'B'))
        assert(B.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'B'))
        assert(B.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'B'))
        assert(B.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'B'))
        assert(B.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'B'))
    end
end

% Internal components that calculate energy convection at ports A and B
components (ExternalAccess = none)
    convection_A = foundation.gas.port_convection(flow_area = area);
    convection_B = foundation.gas.port_convection(flow_area = area);
end
connections
    connect(A, convection_A.port)
    connect(B, convection_B.port)
end

% Equate variables for internal components that calculate energy convection at ports A and B
equations
    convection_A.mdot == mdot_A;
    convection_A.Phi  == Phi_A;
    convection_B.mdot == mdot_B;
    convection_B.Phi  == Phi_B;

    convection_A.ht_I == convection_B.ht_I;
end

end