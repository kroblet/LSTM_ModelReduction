component( Hidden = true ) branch

    nodes
        A = foundation.gas.gas; % A
        B = foundation.gas.gas; % B
    end

    annotations
        A : Side = left;
        B : Side = right;
    end

    parameters
        area  = {1,  'm^2'}; % Cross-sectional area at ports A and B
    end

    equations
        assert(area > 0)
    end

    variables (ExternalAccess = observe)
        mdot_A = {0, 'kg/s'}; % Mass flow rate
        mdot_B  = {0, 'kg/s'}; % Mass flow rate
        Phi_A  = {0, 'kW'  }; % Energy flow rate into port A
        Phi_B  = {0, 'kW'  }; % Energy flow rate into port B
    end

    variables (ExternalAccess = none)
        T_A = {300, 'K'}; % Temperature at port A
        T_B = {300, 'K'}; % Temperature at port B
    end

    branches
        mdot_A : A.mdot -> *;
        mdot_B : B.mdot -> *;
        Phi_A  : A.Phi  -> *;
        Phi_B  : B.Phi  -> *;
    end

    intermediates( ExternalAccess = none )
        % Port pressure
        p_A = A.p;
        p_B = B.p;
    end

    intermediates (Access = private, ExternalAccess = none)
        % Log temperature
        log_T_A = simscape.function.logProtected(T_A/A.T_unit, 1);
        log_T_B = simscape.function.logProtected(T_B/A.T_unit, 1);

        % Log pressure
        log_p_A = simscape.function.logProtected(p_A/A.p_unit, 1);
        log_p_B = simscape.function.logProtected(p_B/A.p_unit, 1);
    end

    intermediates( ExternalAccess = none )
        % Thermal equation of state
        % Use log-space to improve accuracy
        [rho_A, rho_B] = ...
            if A.gas_spec ~= foundation.enum.gas_spec.real_gas, ...
                exp(log_p_A - A.log_ZR - log_T_A) * A.rho_unit; ...
                exp(log_p_B - A.log_ZR - log_T_B) * A.rho_unit ...
            else ...
                exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_A, log_p_A, interpolation = linear, extrapolation = linear)) * A.rho_unit; ...
                exp(tablelookup(A.log_T_TLU2, A.log_p_TLU2, A.log_rho_TLU2, log_T_B, log_p_B, interpolation = linear, extrapolation = linear)) * A.rho_unit ...
            end;

        % Caloric equation of state
        [h_A, h_B] = ...
            if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
                A.h_ref + A.cp_ref*(T_A - A.T_ref); ...
                A.h_ref + A.cp_ref*(T_B - A.T_ref) ...
            elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
                tablelookup(A.T_TLU1, A.h_TLU1, T_A, interpolation = linear, extrapolation = linear); ...
                tablelookup(A.T_TLU1, A.h_TLU1, T_B, interpolation = linear, extrapolation = linear) ...
            else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
                tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_A, p_A, interpolation = linear, extrapolation = linear); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.h_TLU2, T_B, p_B, interpolation = linear, extrapolation = linear) ...
            end;

        % Specific total enthalpy
        ht_A = h_A + (mdot_A/rho_A/area)^2/2;
        ht_B = h_B + (mdot_A/rho_B/area)^2/2;

    end

    intermediates( ExternalAccess = none )
        % Specific heat
        [cp_A, cp_B, cv_A, cv_B] = ...
            if A.gas_spec == foundation.enum.gas_spec.perfect_gas, ...
                A.cp_ref; ...
                A.cp_ref; ...
                A.cv_ref; ...
                A.cv_ref ...
            elseif A.gas_spec == foundation.enum.gas_spec.semiperfect_gas, ...
                tablelookup(A.T_TLU1, A.cp_TLU1, T_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU1, A.cp_TLU1, T_B, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU1, A.cv_TLU1, T_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU1, A.cv_TLU1, T_B, interpolation = linear, extrapolation = nearest) ...
            else ... % A.gas_spec == foundation.enum.gas_spec.real_gas
                tablelookup(A.T_TLU2, A.p_TLU2, A.cp_TLU2, T_A, p_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.cp_TLU2, T_B, p_B, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.cv_TLU2, T_A, p_A, interpolation = linear, extrapolation = nearest); ...
                tablelookup(A.T_TLU2, A.p_TLU2, A.cv_TLU2, T_B, p_B, interpolation = linear, extrapolation = nearest) ...
            end;

        % Average ratio of specific heat
        gamma_A = cp_A / cv_A;
        gamma_B = cp_B / cv_B;
        gamma = (gamma_A + gamma_B)/2;
    end

    equations
        % Specific total enthalpy at internal node
        ht_A == convection_A.ht_I;
        ht_B == convection_B.ht_I;

        let
            % Indicator variables for the valid region of the property tables
            [indicator_pT_A, indicator_pT_B] = ...
                if (A.gas_spec == foundation.enum.gas_spec.real_gas) && (A.pT_region_flag == foundation.enum.pT_region_G.validity_matrix), ...
                    tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, A.T, A.p, interpolation = linear, extrapolation = linear); ...
                    tablelookup(A.T_TLU2, A.p_TLU2, A.pT_validity_TLU2, B.T, B.p, interpolation = linear, extrapolation = linear) ...
                else ...
                    1; ...
                    1 ...
                end;
        in
            % Pressure and temperature must be within the valid region
            assert(indicator_pT_A > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'A'))
            assert(A.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'A'))
            assert(A.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'A'))
            assert(A.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'A'))
            assert(A.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'A'))
            assert(indicator_pT_B > 0, message('physmod:simscape:library:gas:PressureTemperaturePortValidRegion', 'B'))
            assert(B.p >= A.p_min, message('physmod:simscape:library:gas:PressureMinValid', 'B'))
            assert(B.p <= A.p_max, message('physmod:simscape:library:gas:PressureMaxValid', 'B'))
            assert(B.T >= A.T_min, message('physmod:simscape:library:gas:TemperatureMinValid', 'B'))
            assert(B.T <= A.T_max, message('physmod:simscape:library:gas:TemperatureMaxValid', 'B'))
        end
    end

    % Internal components that calculate energy convection at ports A and B
    components (ExternalAccess = none)
        convection_A = foundation.gas.port_convection(flow_area = area);
        convection_B = foundation.gas.port_convection(flow_area = area);
    end
    connections
        connect(A, convection_A.port)
        connect(B, convection_B.port)
    end

    % Equate variables for internal components that calculate energy convection at ports A and B
    equations
        convection_A.mdot == mdot_A;
        convection_A.Phi  == Phi_A;
        convection_B.mdot == mdot_B;
        convection_B.Phi  == Phi_B;

        convection_A.ht_I == convection_B.ht_I;
    end

end