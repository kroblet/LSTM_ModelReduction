component aerodynamic_propeller
    % Aerodynamic Propeller : 1.5
    % Represents an aerodynamic propeller that converts rotary motion
    % to linear thrust. Thrust and power driving the propeller are based on
    % nondimensional coefficients that are a function of the vehicle's
    % advance ratio, J. kT is the nondimensional thrust coefficient and kP is
    % the nondimensional power coefficient. Distinct
    % coefficients for four quadrant operation can be specified using
    % advance angle, β, and nondimensional thrust and torque coefficients, Ct
    % and Cq, respectively.
    %
    % The Rotational connections parameter determines if the physical
    % signals w and Q specify the rotational velocity and resistive torque,
    % respectively, or if the mechanical rotational port, R1, is associated
    % with the shaft. The Translational connections
    % parameter determines if the physical signals Va and Th specify the
    % advance velocity and thrust force, respectively, or if the mechanical
    % translational conserving ports, R2 and C2, specify the vessel and
    % reference fluid, respectively.
    %
    % For a propeller with controllable-pitch blades, the physical signal
    % input θ controls the pitch angle at a reference blade section,
    % typically at 70% of the blade radius. Optionally specify
    % variable density and expose physical signal input Rho by setting
    % Fluid density specification to Variable. Optionally enable an
    % efficiency sensor to expose the physical signal output E.
    
    % Copyright 2020-2022 The MathWorks, Inc.
    
    outputs (ExternalAccess=none)
        Q_out  = {0, 'N*m'}; % Q
        Th_out = {0, 'N'};   % Th
    end
    nodes (ExternalAccess=none)
        R1 = foundation.mechanical.rotational.rotational; % R1
        C1 = foundation.mechanical.rotational.rotational; % C1
    end
    inputs (ExternalAccess=none)
        w_in     = {0, 'rad/s'};     % w
        Va_in    = {0, 'm/s'};       % Va
        pitch_in = {0.9, '1'};       % θ
        rho_in   = {1000, 'kg/m^3'}; % Rho
    end
    nodes (ExternalAccess=none)
        R2 = foundation.mechanical.translational.translational; % R2
        C2 = foundation.mechanical.translational.translational; % C2
    end
    outputs (ExternalAccess=none)
        Eff_out     = {0, '1'};   % E
    end

    annotations
        [Q_out, Th_out, R1, C1]   : Side = left
        [pitch_in, rho_in ]   : Side = bottom
        [w_in, Va_in, R2, C2] : Side = right
        Eff_out                : Side = top
    end
    
    parameters
        parameterization  =  supplement.enum.PropellerParameterization.Constant; % Parameterization
        direction         =  supplement.enum.PropellerDirection.Positive; % Propeller direction
        D                 = {1.5,      'm'};                      % Propeller diameter
        density_spec      = foundation.enum.constant_variable.constant; % Fluid density specification
        n_thr             = {0.001,   'Hz'};                      % Rotational speed threshold
        efficiency_sensor = false;                                % Efficiency sensor
        rotational_ports  = sdl.enum.ConnectionType.Conserving;   % Rotational connections
        translational_ports = sdl.enum.ConnectionType.Conserving; % Translational connections
    end
    
    parameters (ExternalAccess=none)
        pitch_type = foundation.enum.constant_controlled.constant; % Blade pitch type
        k_thr    = {0.001, '1'}; % Saturation threshold for nondimensional coefficients
        kt_const = {0.15, '1'};  % Thrust coefficient, kT
        kp_const = {0.13, '1'};  % Power coefficient, kP
        kt_poly_fixed = {[ 0.0020  0.0006  -0.0509  0.0617], '1'}; % kT polynomial coefficients (pN...p0)
        kp_poly_fixed = {[-0.0752  0.0577  -0.0622  0.1600], '1'}; % kP polynomial coefficients (pN...p0)
        pitch_angle_TLU = {[-15 15 25 35 45], 'deg'};              % Pitch angle vector, θ
        kt_poly_TLU = {[ 2.0e-4 -4.1e-4 -3.6e-2  3.0e-2
                         2.6e-4 -5.6e-4 -4.8e-2  4.0e-2
                         2.0e-3  6.3e-4 -5.1e-2  6.2e-2
                         1.4e-3 -1.6e-3 -4.8e-2  8.7e-2
                         8.7e-4 -3.6e-3 -4.1e-2  1.2e-1], '1'};  % Table of kT polynomial coefficients (θ, pN...p0)
        kp_poly_TLU = {[-1.0e-1  3.1e-2  5.5e-3  8.8e-2
                        -8.1e-2 -2.5e-2  4.4e-3  7.0e-2
                        -7.5e-2  5.8e-2 -6.2e-2  1.6e-1
                        -5.2e-2  6.5e-2 -8.0e-2  3.0e-1
                        -3.1e-2  5.7e-2 -6.9e-2  4.0e-1], '1'};  % Table of kP polynomial coefficients (θ, pN...p0)
        % Advance ratio TLU parameters
        J_TLU= {[0.01 0.3 0.625 1.55 2 2.6], '1'};                                     % Advance ratio vector, J
        kt_TLU_1D = {[0.0614    0.0473    0.0318   -0.0127   -0.0343   -0.0630], '1'}; % Thrust coefficient vector, kT(J)
        kp_TLU_1D = {[0.1496    0.1314    0.1160   -0.0521   -0.1503   -0.2813], '1'}; % Power coefficient vector, kP(J)
        kt_TLU_2D= {[  1.9e-4    1.3e-02   4.8e-03  -1.7e-02  -3.0e-02  -4.5e-02
                       3.9e-4    2.5e-02   9.6e-03  -3.7e-02  -6.0e-02  -9.0e-02
                       6.1e-4    4.7e-02   3.2e-02  -1.3e-02  -3.4e-02  -6.3e-02
                       8.6e-4    7.2e-02   5.7e-02   1.4e-02  -7.6e-03  -3.6e-02
                       1.2e-1   1.04e-01   9.0e-02   4.9e-02   2.9e-02   1.9e-03], '1'};  % Thrust coefficient table, kT(θ, J)
        kp_TLU_2D= { [ 2.9e-02  2.9e-02   1.6e-02   6.0e-02   0.9e-02  -1.6e-01
                       5.9e-02  5.4e-02   3.1e-02  -1.2e-01  -1.9e-01  -2.9e-01
                       1.5e-01  1.3e-01   1.2e-01  -5.2e-02  -1.5e-01  -2.8e-01
                       2.6e-01  2.4e-01   2.2e-01   9.7e-02  -4.0e-02  -2.5e-01
                       3.9e-01  3.9e-01   3.8e-01   3.2e-01   2.4e-01   6.2e-02], '1'}; % Power coefficient table, kP(θ, J)
        % Advance angle TLU parameters
        beta_TLU= {linspace(0,360, 10), 'deg'};            % Advance angle vector, β
        Ct_TLU_1D= 0.035*sind(linspace(0,360, 10) - 200);  % Thrust coefficient vector, Ct(β)
        Cq_TLU_1D= 0.010*sind(linspace(0,360, 10) - 200);  % Torque coefficient vector, Cq(β)
        Ct_TLU_2D= [0.01*sind(linspace(0,360, 10) - 200);
                   0.020*sind(linspace(0,360, 10) - 200);
                   0.035*sind(linspace(0,360, 10) - 200);
                   0.04*sind(linspace(0,360, 10) - 200);
                   0.06*sind(linspace(0,360, 10) - 200)];  % Thrust coefficient table, Ct(θ, β)
        Cq_TLU_2D= [0.0005*sind(linspace(0,360, 10) - 200);
                   0.0015*sind(linspace(0,360, 10) - 200);
                   0.0025*sind(linspace(0,360, 10) - 200);
                   0.0035*sind(linspace(0,360, 10) - 200);
                   0.0045*sind(linspace(0,360, 10) - 200)]; % Torque coefficient table, Cq(θ, β)
        %
        interp_method = simscape.enum.interpolation.linear; % Interpolation method
        extrap_method = simscape.enum.extrapolation.linear; % Extrapolation method
        %
        operation_check = simscape.enum.assert.action.warn; % Check if operating beyond normal propeller operation
        %                                                     0 - none
        %                                                     1 - warn
        %                                                     2 - error
        rho               = {1.225,    'kg/m^3'}; % Fluid density
        model_inertia = false;                    % Model inertia
        propeller_inertia = {1,  'kg*m^2' };      % Propeller inertia
        propeller_mass    = {10, 'kg'};           % Propeller mass
    end
%     parameters (Hidden = true)
%         expose_port_C = true; % Expose shaft casing port, C1
%     end
    
    annotations
        UILayout = [UIGroup('physmod:sdl:library:tabs:Propeller',...
            parameterization, pitch_type, direction,...
            D,...
            kt_const, kp_const,...
            kt_poly_fixed, kp_poly_fixed, ...
            pitch_angle_TLU, kt_poly_TLU, kp_poly_TLU,...
            J_TLU, kt_TLU_1D, kp_TLU_1D, kt_TLU_2D, kp_TLU_2D,...
            beta_TLU, Ct_TLU_1D, Cq_TLU_1D, Ct_TLU_2D, Cq_TLU_2D, interp_method, extrap_method)
            UIGroup('physmod:sdl:library:tabs:EnvironmentAndDynamics',...
            density_spec, rho, rotational_ports, translational_ports, model_inertia, propeller_inertia, propeller_mass)
            UIGroup('physmod:sdl:library:tabs:Advanced',...
            efficiency_sensor, n_thr, k_thr, operation_check)]
    end
    
    variables (Access=public, ExternalAccess=none)
        w      = { 0, 'rad/s'};        % Rotational velocity
        Q      = { 0, 'N*m' };         % Aerodynamic torque
        v      = { 0, 'm/s'};          % Translational velocity
        thrust = { 0, 'N' };           % Aerodynamic thrust
    end
    branches
        Q      : R1.t -> C1.t;    % Torque
        thrust : C2.f -> R2.f;    % Thrust
    end

    % Parameter visibility and checks
    equations
        assert(D     > 0)
        assert(n_thr > 0)
    end
    if efficiency_sensor || ...
       parameterization == supplement.enum.PropellerParameterization.PolynomialFit || parameterization == supplement.enum.PropellerParameterization.Tabulated
        annotations
            k_thr : ExternalAccess = modify;
        end
        equations
            assert(k_thr > 0)
        end
    end
    if parameterization == supplement.enum.PropellerParameterization.PolynomialFit || parameterization == supplement.enum.PropellerParameterization.Tabulated
        annotations
            operation_check  : ExternalAccess = modify;
        end
    end
    if parameterization == supplement.enum.PropellerParameterization.Tabulated || parameterization == supplement.enum.PropellerParameterization.TabulatedBeta
        annotations
            [interp_method,...
             extrap_method] :  ExternalAccess = modify;
        end
    end

    if parameterization == supplement.enum.PropellerParameterization.Constant
        annotations
            [ kt_const,...
              kp_const ] : ExternalAccess = modify;
        end
        equations
            assert(kt_const > 0);
            assert(kp_const > 0);
        end
    else % parameterization ~= supplement.enum.PropellerParameterization.Constant
        annotations
            pitch_type : ExternalAccess = modify;
        end
        if pitch_type == foundation.enum.constant_controlled.controlled
            annotations
                [pitch_in,...
                 pitch_angle_TLU] : ExternalAccess = modify;
            end
            equations
                assert(numel(pitch_angle_TLU) >= 2)
                assert(all(diff(pitch_angle_TLU) > 0))
            end
        end
        if parameterization == supplement.enum.PropellerParameterization.PolynomialFit
            if pitch_type == foundation.enum.constant_controlled.constant
                annotations
                    [ kt_poly_fixed,...
                      kp_poly_fixed] : ExternalAccess = modify;
                end
                parameters
                    % Derived parameters: polynomial powers
                    kt_powers= length(kt_poly_fixed)-1:-1:0;
                    kp_powers= length(kp_poly_fixed)-1:-1:0;
                    % Friendly names for asserts
                    kt_poly_fixed_zero= kt_poly_fixed(end); % kT at zero advance ratio (derived from kT polynomial coefficients (PN...p0))
                    kp_poly_fixed_zero= kp_poly_fixed(end); % kP at zero advance ratio (derived from kP polynomial coefficients (PN...p0))
                end
                equations
                    assert(kt_poly_fixed_zero > 0)
                    assert(kp_poly_fixed_zero > 0)
                end
            else % pitch_type == foundation.enum.constant_controlled.variable
                annotations
                    [kt_poly_TLU,...
                     kp_poly_TLU] : ExternalAccess = modify;
                end
                parameters
                    % Derived parameters: polynomial powers
                    kt_powers= length(kt_poly_TLU(1,:))-1:-1:0;
                    kp_powers= length(kp_poly_TLU(1,:))-1:-1:0;
                    % Friendly names for assert messages
                    kt_poly_TLU_numColumns= kt_poly_TLU(:,1); % Columns of Table of kT polynomial coefficients (P/D, pN...p0)
                    kp_poly_TLU_numColumns= kp_poly_TLU(:,1); % Columns of Table of kP polynomial coefficients (P/D, pN...p0)
                    kt_poly_zero= kt_poly_TLU(:,end); % kT at zero advance ratio (derived from Table of kT polynomial coefficients (P/D, PN...p0))
                    kp_poly_zero= kp_poly_TLU(:,end); % kP at zero advance ratio (derived from Table of kP polynomial coefficients (P/D, PN...p0))
                end
                equations
                    assert(length(kt_poly_TLU_numColumns) == length(pitch_angle_TLU) )
                    assert(length(kp_poly_TLU_numColumns) == length(pitch_angle_TLU) )
                    assert( all( kt_poly_zero > 0 ) )
                    assert( all( kp_poly_zero > 0 ) )
                end
            end
        elseif parameterization == supplement.enum.PropellerParameterization.Tabulated
            annotations
                J_TLU : ExternalAccess = modify;
            end
            parameters
                J_TLU_end= J_TLU(end); % Last element of advance velocity vector
            end
            equations
                assert(all(diff(J_TLU)>0))
                assert(J_TLU_end > 0)
            end
            if pitch_type == foundation.enum.constant_controlled.constant
                annotations
                    [kt_TLU_1D,...
                     kp_TLU_1D ] :  ExternalAccess = modify;
                end
                equations
                    % permit kt, kp < 0
                    assert(length(J_TLU) == length(kt_TLU_1D))
                    assert(length(J_TLU) == length(kp_TLU_1D))
                end
            else % pitch_type == foundation.enum.constant_controlled.variable
                 annotations
                     [kt_TLU_2D,...
                      kp_TLU_2D ] :  ExternalAccess = modify;
                 end
                 equations
                     % permit kt, kp < 0
                     assert(all(size(kt_TLU_2D) == [numel(pitch_angle_TLU), numel(J_TLU)]))
                     assert(all(size(kp_TLU_2D) == [numel(pitch_angle_TLU), numel(J_TLU)]))
                 end
            end
        else % parameterization == supplement.enum.PropellerParameterization.TabulatedBeta
            annotations
                beta_TLU : ExternalAccess = modify;
            end
            parameters (Access = private, ExternalAccess = none)
                threeSixtyDeg= {360, 'deg'}; % 360 deg
            end
            equations
                assert( all(beta_TLU >= 0) )
                assert( all(beta_TLU <= threeSixtyDeg ) )
                assert( all(diff(beta_TLU) > 0 ) )
            end
            if pitch_type == foundation.enum.constant_controlled.constant
                annotations
                    [Ct_TLU_1D,...
                     Cq_TLU_1D] : ExternalAccess = modify;
                end
                equations
                    % permit nonmonotonic and mixed positive/negative values in Ct_TLU_1D and Cq_TLU_1D
                    assert(length(beta_TLU) == length(Ct_TLU_1D))
                    assert(length(beta_TLU) == length(Cq_TLU_1D))
                end
            else % pitch_type == foundation.enum.constant_controlled.variable
                annotations
                    [Ct_TLU_2D,...
                     Cq_TLU_2D] : ExternalAccess = modify;
                end
                equations
                    % permit nonmonotonic and mixed positive/negative values in Ct_TLU_1D and Cq_TLU_1D
                    assert(all(size(Ct_TLU_2D) == [numel(pitch_angle_TLU), numel(beta_TLU)]))
                    assert(all(size(Cq_TLU_2D) == [numel(pitch_angle_TLU), numel(beta_TLU)]))
                end
            end
        end
    end
    
    % Set density
    if density_spec == foundation.enum.constant_variable.constant
        annotations
            rho : ExternalAccess = modify;
        end
        equations
            assert(rho > 0)
        end
        parameters
            density = rho;
        end
    else % density_spec == foundation.enum.constant_variable.variable
        annotations
            rho_in : ExternalAccess = modify;
        end
        equations
            assert(rho_in > 0)
        end
        intermediates (Access = private, ExternalAccess = none)
            density = rho_in;
        end
    end
    
    % Set rotational ports
    if rotational_ports == sdl.enum.ConnectionType.PS
        annotations
            [w_in, Q_out] : ExternalAccess = modify; % PS ports
        end
        intermediates (Access=private, ExternalAccess=none)
            % Angular speed - Hz
            n= value(w_in, 'rad/s') / {2*pi, 's'};
        end        
        equations
            % torque variable is not active
            Q == { 0, 'N*m' };
        end
        connections
            % R1 and C1 ports are not active
            connect(R1, C1, *)
        end
    else % rotational_ports == sdl.enum.ConnectionType.Conserving
        annotations
            [R1, ... % Rotational port
             w, Q ...   % variables
            ] : ExternalAccess = modify; 
        end
%         if expose_port_C
            annotations
                C1 : ExternalAccess = modify
            end
%         else
%             connections
%                 connect(C1, *)
%             end
%         end
        intermediates (Access=private, ExternalAccess=none)
            % Angular speed - Hz
            n= value(w, 'rad/s') / {2*pi, 's'};
        end  
        % Q_out output is not active
        equations
            Q_out == { 0, 'N*m' };
        end
    end
    equations
        w == R1.w - C1.w;
    end

    % Set translational ports
    if translational_ports == sdl.enum.ConnectionType.PS
        annotations
            [Va_in, Th_out] : ExternalAccess = modify; % PS ports
        end
        % thrust variable and R2, C2 ports, are not active
        equations
            thrust == { 0, 'N' };
        end
        connections
            connect(R2, C2, *)
        end
    else % translational_ports == sdl.enum.ConnectionType.Conserving
        annotations
           [R2, C2,...   % translational ports
            v, thrust... % variables
             ] : ExternalAccess = modify;
        end
        % Th output is not active when translational_ports == sdl.enum.ConnectionType.Conserving
        equations
            Th_out == { 0, 'N' };
        end
    end
    equations
        v == R2.v - C2.v
    end

    % Add inertia dynamics
    if rotational_ports == sdl.enum.ConnectionType.Conserving || ...
            translational_ports == sdl.enum.ConnectionType.Conserving
        annotations
            model_inertia : ExternalAccess = modify
        end
    end

    % Set rotational inertia
    if model_inertia == true && rotational_ports == sdl.enum.ConnectionType.Conserving
        annotations
            propeller_inertia : ExternalAccess = modify
        end
        equations
            assert(propeller_inertia > 0)
        end
        components(ExternalAccess=observe)
            inertia = foundation.mechanical.rotational.inertia...
                (inertia= propeller_inertia,...
                w.priority= simscape.priority.none);
        end
        connections
            connect(inertia.I, R1);
        end
    end
    
    % Set translational inertia
    if model_inertia == true && translational_ports == sdl.enum.ConnectionType.Conserving
        annotations
            propeller_mass : ExternalAccess = modify
        end
        equations
            assert(propeller_mass > 0)
        end
        components(ExternalAccess=observe)
            mass = foundation.mechanical.translational.mass...
                (mass= propeller_mass, ...
                v.priority=simscape.priority.none);
        end
        connections
            connect(mass.M, R2);
        end
    end


    % Checks and range limitations for Advance ratio, J for polynomialFit parameterization
    % The ploynomialFit parameterization can only define propeller characteristics for the first quadrant (+Va and +direction*n)
    % and then block assumes symmetry/asymmetry in the other quadrants.
    if parameterization == supplement.enum.PropellerParameterization.PolynomialFit
        if pitch_type == foundation.enum.constant_controlled.constant
            parameters
                % Get the advance velocity ratios when kT and kP cross 0.
                % Saturate the magnitudes at 100 and 110 respectively (very large)
                J_max = sdl_internal.poly_roots_min_magnitude(kt_poly_fixed); % First positive root of the kT vs. J curve (derived from kT polynomial coefficients (pN...p0))
                J_max_kp = sdl_internal.poly_roots_min_magnitude(kp_poly_fixed); % First positive root of the kP vs. J curve (derived from kP polynomial coefficients (pN...p0))
            end
            % Check for validity of polynomial coefficients:
            % When thrust is zero, power must be greater than zero.
            % Use this approach to avoid polynomial curve blow-up.
            equations
                assert( ~isnan(J_max), message('physmod:sdl:library:MustExist', text(J_max) ) )
                assert( ~isnan(J_max_kp), message('physmod:sdl:library:MustExist', text(J_max_kp) ) )
                assert(J_max_kp > J_max)
            end
        else % pitch_type == foundation.enum.constant_controlled.controlled
            parameters
                J_max_tab = sdl_internal.poly_roots_min_magnitude(kt_poly_TLU); % First positive root of each kT vs. J curve (derived from Table of kT polynomial coefficients (P/D, pN...p0)) 
                J_max_kp_tab = sdl_internal.poly_roots_min_magnitude(kp_poly_TLU); % First positive root of each kP vs. J curve (derived from Table of kP polynomial coefficients (P/D, pN...p0))
                % Friendly name for message of assert( all(J_max_kq_tab > J_max_tab) ):
                J_max_tab_friendly= J_max_tab; % First positive root of each corresponding kT vs. J curve (derived from Table of kT polynomial coefficients (P/D, pN...p0)
            end
            equations
                assert( all(~isnan(J_max_tab)), message('physmod:sdl:library:MustExist', text(J_max_tab) ) )
                assert( all(~isnan(J_max_kp_tab)), message('physmod:sdl:library:MustExist', text(J_max_kp_tab) ) )
                assert( all(J_max_kp_tab > J_max_tab), message('physmod:simscape:compiler:patterns:checks:GreaterThan', text(J_max_kp_tab), text(J_max_tab_friendly) ) )
            end
            intermediates (Access = private, ExternalAccess = none)
                J_max= tablelookup(pitch_angle_TLU(:), J_max_tab, pitch_in);
            end
        end
    end
    
    % Calculate advance velocity, advance ratio J, advance angle beta
    if efficiency_sensor || parameterization ~= supplement.enum.PropellerParameterization.Constant
        % Advance speed ratio - saturated to avoid divide-by-zero
        if translational_ports == sdl.enum.ConnectionType.PS
            intermediates (Access = private, ExternalAccess = none)
                advance_velocity= Va_in;
            end
        else % translational_ports == sdl.enum.ConnectionType.Conserving
            intermediates (Access = private, ExternalAccess = none)
                advance_velocity= v;
            end
        end
       
        if parameterization == supplement.enum.PropellerParameterization.TabulatedBeta
            intermediates (Access = private, ExternalAccess = none)
                % Advance angle between (-pi, pi]
                beta_val= atan2(advance_velocity, 0.7*pi*direction*n*D);
            end
            intermediates (Access = private) % For logging
                % Advance angle between [0, 2pi)
                beta= if lt(beta_val, 0), beta_val + 2*pi else beta_val end; % Advance angle
            end
        else % parameterizations use J
            intermediates (Access = private, ExternalAccess = none)
                J_val= advance_velocity*direction*n/(D*(n^2+n_thr^2)); % Signed advance ratio
            end
            % Logged advance ratio
            if parameterization == supplement.enum.PropellerParameterization.PolynomialFit
                % PolynomialFit assumes symmetry for negative J
                % Saturate Advance speed ratio, J, to avoid invalid large J
                % kt, kp, efficiency values based on polynomial coefficients --> inf for large J
                intermediates (Access = private) % For logging
                    J = if gt( neabs(J_val), J_max-k_thr), J_max-k_thr  else neabs(J_val) end; % Advance ratio
                end
            elseif (parameterization == supplement.enum.PropellerParameterization.Tabulated && J_TLU(1) >= 0 )
                % signed J based on polynomial range
                intermediates (Access = private) % For logging
                    J = neabs(J_val); % Advance ratio
                end
            else % parameterization == supplement.enum.PropellerParameterization.Tabulated && J_TLU(1) < 0 ...
                 % || parameterization == supplement.enum.PropellerParameterization.Constant && efficiency_sensor
                intermediates (Access = private) % For logging
                    J = J_val; % Advance ratio
                end
            end
        end

    end

    % Calculate thrust and power coefficients
    if parameterization ==  supplement.enum.PropellerParameterization.Constant
        parameters (Access = private, ExternalAccess = none)
            % thrust coefficient
            kt= kt_const;
            
            % power coefficient
            kp= kp_const;
        end
    elseif parameterization ==  supplement.enum.PropellerParameterization.PolynomialFit
        % Polynomial fit saturates kT, kP => 0.
        % Restricts polynomial fit to be defined for +kT and +kP over +J.
        % Then block symmetrically/asymmetrical expands to other J quadrants.
        if pitch_type == foundation.enum.constant_controlled.constant
            intermediates (Access = private) % For logging
                % thrust coefficient (polynomial fit)
                kt= sum(kt_poly_fixed(1:end-1).*J.^kt_powers(1:end-1)) + kt_poly_fixed(end)

                % power coefficient (polynomial fit)
                kp= sum(kp_poly_fixed(1:end-1).*J.^kp_powers(1:end-1)) + kp_poly_fixed(end)
            end
        else % pitch_type == foundation.enum.constant_controlled.controlled
            intermediates (Access = private, ExternalAccess = none)
                % thrust coefficient (polynomial fit)
                kt_poly= tablelookup(pitch_angle_TLU(:), kt_powers, kt_poly_TLU, repmat(pitch_in, 1,length(kt_powers)), kt_powers, interpolation = linear, extrapolation = nearest);

                % power coefficient (polynomial fit)
                kp_poly= tablelookup(pitch_angle_TLU(:), kp_powers, kp_poly_TLU, repmat(pitch_in, 1,length(kp_powers)), kp_powers, interpolation = linear, extrapolation = nearest);
            end
            intermediates (Access = private) % For logging
                kt= sum(kt_poly(1:end-1).*J.^kt_powers(1:end-1)) + kt_poly(end); % Thrust coefficient
                kp= sum(kp_poly(1:end-1).*J.^kp_powers(1:end-1)) + kp_poly(end); % Power coefficient
            end
        end
    elseif parameterization ==  supplement.enum.PropellerParameterization.Tabulated
        if pitch_type == foundation.enum.constant_controlled.constant
            intermediates (Access = private) % For logging
                kt= tablelookup(J_TLU, kt_TLU_1D, J, interpolation = interp_method, extrapolation = extrap_method); % Thrust coefficient
                kp= tablelookup(J_TLU, kp_TLU_1D, J, interpolation = interp_method, extrapolation = extrap_method); % Power coefficient
            end
        else % pitch_type == foundation.enum.constant_controlled.controlled
            intermediates (Access = private) % For logging
                kt= tablelookup(pitch_angle_TLU, J_TLU, kt_TLU_2D, pitch_in, J, interpolation = interp_method, extrapolation = extrap_method); % Thrust coefficient
                kp= tablelookup(pitch_angle_TLU, J_TLU, kp_TLU_2D, pitch_in, J, interpolation = interp_method, extrapolation = extrap_method); % Power coefficient
            end
        end
    else % parameterization ==  supplement.enum.PropellerParameterization.TabulatedBeta
        if pitch_type == foundation.enum.constant_controlled.constant
            intermediates (Access = private) % For logging
                Ct= tablelookup(beta_TLU, Ct_TLU_1D, beta, interpolation = interp_method, extrapolation = extrap_method); % Thrust coefficient
                Cq= tablelookup(beta_TLU, Cq_TLU_1D, beta, interpolation = interp_method, extrapolation = extrap_method); % Torque coefficient
            end
        else % pitch_type == foundation.enum.constant_controlled.controlled
            intermediates (Access = private) % For logging
                Ct= tablelookup(pitch_angle_TLU, beta_TLU, Ct_TLU_2D, pitch_in, beta, interpolation = interp_method, extrapolation = extrap_method); % Thrust coefficient
                Cq= tablelookup(pitch_angle_TLU, beta_TLU, Cq_TLU_2D, pitch_in, beta, interpolation = interp_method, extrapolation = extrap_method); % Torque coefficient
            end
        end
    end


    % Propeller drag torque equation
    if rotational_ports == sdl.enum.ConnectionType.PS
        if parameterization == supplement.enum.PropellerParameterization.TabulatedBeta
            equations
                Q_out == 0.125*Cq*density*D^3*pi*( advance_velocity^2 + (0.7*D*pi*n)^2 );
            end
        else
            equations
                Q_out == kp*density*n*sqrt(n^2 + n_thr^2)*D^5 /(2*pi);
            end
        end
    else
        if parameterization ==  supplement.enum.PropellerParameterization.TabulatedBeta
            equations
                Q == 0.125*Cq*density*D^3*pi*( advance_velocity^2 + (0.7*D*pi*n)^2 );
            end
        else
            equations
                Q == kp*density*n*sqrt(n^2 + n_thr^2)*D^5 /(2*pi);
            end
        end
    end

        
    % Propeller thrust equation
    if translational_ports == sdl.enum.ConnectionType.PS
        if parameterization ==  supplement.enum.PropellerParameterization.TabulatedBeta
            equations
                Th_out == 0.125*Ct*density*D^2*pi*( advance_velocity^2 + (0.7*D*pi*n)^2 );
            end
        else
            equations
                Th_out == kt*density*D^4*direction*n*sqrt(n^2 + n_thr^2);
            end
        end
    else
        if parameterization ==  supplement.enum.PropellerParameterization.TabulatedBeta
            equations
                thrust == 0.125*Ct*density*D^2*pi*( advance_velocity^2 + (0.7*D*pi*n)^2 );
            end
        else
            equations
                thrust == kt*density*D^4*direction*n*sqrt(n^2 + n_thr^2);
            end
        end
    end

    % Run-time check on advance ratio, J= Va/(Dn)
    if parameterization == supplement.enum.PropellerParameterization.PolynomialFit
        % Coefficients based on fluid flow may be invalid outside the normal operation range.
        % Normal operation: [+Va, +direction*n], and unsaturated J.
        equations
            assert(J_val < J_max, message('physmod:sdl:library:PropellerOperatingBeyondRange'), Action = operation_check)
        end
    end
    if parameterization == supplement.enum.PropellerParameterization.PolynomialFit || parameterization == supplement.enum.PropellerParameterization.Tabulated
        parameters
            negative_k_thr= -k_thr; % Negative of Saturation threshold for nondimensional coefficients
        end
        equations
            assert(J_val > negative_k_thr && direction*n > -n_thr && advance_velocity >= 0, message('physmod:sdl:library:PropellerOperatingBeyondRange'), Action = operation_check)
        end
    end
    
    % Efficiency output
    if efficiency_sensor
        annotations
            Eff_out : ExternalAccess = modify;
        end
        if parameterization == supplement.enum.PropellerParameterization.Constant
            equations
                Eff_out == (J^2 + k_thr^2)^0.5*kt/kp;
            end
        elseif parameterization == supplement.enum.PropellerParameterization.TabulatedBeta
             equations
                Eff_out == sqrt( ((advance_velocity*Ct)^2 + (D*pi*n_thr*k_thr)^2) / ((n*Cq)^2 + (0.1*n_thr*k_thr)^2) )/(2*pi*D);
            end
        else % parameterization == PolynomialFit or Tabulated
            equations
                Eff_out == (J^2 + k_thr^2)^0.5*kt/( kp^2 + k_thr^2  )^0.5;
            end
        end
    else % ~efficiency_sensor
         % efficiency port does not have externalAccess
        equations
            Eff_out == 0
        end
    end
    
    
end 